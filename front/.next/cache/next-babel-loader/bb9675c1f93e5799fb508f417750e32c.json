{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/dong/Documents/react-sns/front/components/PostCard.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    margin-bottom: 20px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback } from \"react\";\nimport { Card, Button, Avatar, Popover, List, Comment } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from \"@ant-design/icons\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport PostImages from \"./PostImages\";\nimport { REMOVE_POST_REQUEST } from \"../reducers/post\"; // import FollowButton from \"./FollowButton\";\n\nvar CardWrapper = styled.div(_templateObject());\n_c = CardWrapper;\n\nvar PostCard = function PostCard(_ref) {\n  _s();\n\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(false),\n      liked = _useState2[0],\n      setLiked = _useState2[1];\n\n  var dispatch = useDispatch();\n  var id = useSelector(function (state) {\n    return state.user.me && state.user.me.id;\n  });\n  var onToggleLike = useCallback(function () {\n    setLiked(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onRemovePost = useCallback(function () {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id // 삭제할 게시물의 아이디\n\n    });\n  }, []);\n  return __jsx(CardWrapper, {\n    key: post.id,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, __jsx(Card // 이미지가 1개 이상일 때 이미지 표시\n  , {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 42\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 29\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 106\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"message\",\n      onClick: onToggleComment,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 29\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 41\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 41\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 37\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    }))] // extra={<FollowButton post={post} />}\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 36\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 118\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(CommentForm, {\n    post: post,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }), __jsx(List, {\n    header: \"\".concat(post.Comments.length, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: \"/user\",\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 41\n          }\n        }, __jsx(\"a\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 45\n          }\n        }, __jsx(Avatar, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 49\n          }\n        }, item.User.nickname[0]))),\n        content: item.content,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 33\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  })));\n};\n\n_s(PostCard, \"eSYAYaRiJrURMCbRUFC6QRjJdX8=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c2 = PostCard;\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.string,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.any),\n    Images: PropTypes.arrayOf(PropTypes.any)\n  })\n};\nexport default PostCard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CardWrapper\");\n$RefreshReg$(_c2, \"PostCard\");","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/components/PostCard.js"],"names":["React","useState","useCallback","Card","Button","Avatar","Popover","List","Comment","PropTypes","RetweetOutlined","HeartTwoTone","HeartOutlined","MessageOutlined","EllipsisOutlined","styled","Link","useSelector","useDispatch","CommentForm","PostCardContent","PostImages","REMOVE_POST_REQUEST","CardWrapper","div","PostCard","post","commentFormOpened","setCommentFormOpened","liked","setLiked","dispatch","id","state","user","me","onToggleLike","prev","onToggleComment","onRemovePost","type","data","Images","User","nickname","content","Comments","length","item","pathname","query","propTypes","shape","string","object","createdAt","arrayOf","any"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,MAAvB,EAA+BC,OAA/B,EAAwCC,IAAxC,EAA8CC,OAA9C,QAA6D,MAA7D;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,eAAT,EAA0BC,YAA1B,EAAwCC,aAAxC,EAAuDC,eAAvD,EAAwEC,gBAAxE,QAAgG,mBAAhG;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,mBAAT,QAAoC,kBAApC,C,CACA;;AAEA,IAAMC,WAAW,GAAGR,MAAM,CAACS,GAAV,mBAAjB;KAAMD,W;;AAIN,IAAME,QAAQ,GAAG,SAAXA,QAAW,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACuBzB,QAAQ,CAAC,KAAD,CAD/B;AAAA,MACpB0B,iBADoB;AAAA,MACDC,oBADC;;AAAA,mBAED3B,QAAQ,CAAC,KAAD,CAFP;AAAA,MAEpB4B,KAFoB;AAAA,MAEbC,QAFa;;AAI3B,MAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,MAAMc,EAAE,GAAGf,WAAW,CAAC,UAACgB,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAN,CAAWC,EAAX,IAAiBF,KAAK,CAACC,IAAN,CAAWC,EAAX,CAAcH,EAA1C;AAAA,GAAD,CAAtB;AAEA,MAAMI,YAAY,GAAGlC,WAAW,CAAC,YAAM;AACnC4B,IAAAA,QAAQ,CAAC,UAACO,IAAD;AAAA,aAAU,CAACA,IAAX;AAAA,KAAD,CAAR;AACH,GAF+B,EAE7B,EAF6B,CAAhC;AAIA,MAAMC,eAAe,GAAGpC,WAAW,CAAC,YAAM;AACtC0B,IAAAA,oBAAoB,CAAC,UAACS,IAAD;AAAA,aAAU,CAACA,IAAX;AAAA,KAAD,CAApB;AACH,GAFkC,EAEhC,EAFgC,CAAnC;AAIA,MAAME,YAAY,GAAGrC,WAAW,CAAC,YAAM;AACnC6B,IAAAA,QAAQ,CAAC;AACLS,MAAAA,IAAI,EAAElB,mBADD;AAELmB,MAAAA,IAAI,EAAEf,IAAI,CAACM,EAFN,CAEU;;AAFV,KAAD,CAAR;AAIH,GAL+B,EAK7B,EAL6B,CAAhC;AAOA,SACI,MAAC,WAAD;AAAa,IAAA,GAAG,EAAEN,IAAI,CAACM,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD,CACI;AADJ;AAEI,IAAA,KAAK,EAAEN,IAAI,CAACgB,MAAL,CAAY,CAAZ,KAAkB,MAAC,UAAD;AAAY,MAAA,MAAM,EAAEhB,IAAI,CAACgB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAF7B;AAGI,IAAA,OAAO,EAAE,CACL,MAAC,eAAD;AAAiB,MAAA,GAAG,EAAC,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,EAELb,KAAK,GAAG,MAAC,YAAD;AAAc,MAAA,YAAY,EAAC,SAA3B;AAAqC,MAAA,GAAG,EAAC,OAAzC;AAAiD,MAAA,OAAO,EAAEO,YAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAAgF,MAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,OAAO,EAAEA,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFhF,EAGL,MAAC,eAAD;AAAiB,MAAA,GAAG,EAAC,SAArB;AAA+B,MAAA,OAAO,EAAEE,eAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHK,EAIL,MAAC,OAAD;AACI,MAAA,GAAG,EAAC,UADR;AAEI,MAAA,OAAO,EACH,MAAC,MAAD,CAAQ,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEKN,EAAE,IAAIN,IAAI,CAACiB,IAAL,CAAUX,EAAV,KAAiBA,EAAvB,GACG,4BACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAEI,MAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAEO,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFJ,CADH,GAQG,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAVR,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAkBI,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBJ,CAJK,CAHb,CA4BI;AA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA8BI,MAAC,IAAD,CAAM,IAAN;AAAW,IAAA,MAAM,EAAE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASb,IAAI,CAACiB,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CAAnB;AAA6D,IAAA,KAAK,EAAElB,IAAI,CAACiB,IAAL,CAAUC,QAA9E;AAAwF,IAAA,WAAW,EAAE,MAAC,eAAD;AAAiB,MAAA,QAAQ,EAAElB,IAAI,CAACmB,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9BJ,CADJ,EAmCKlB,iBAAiB,IACd,4BACI,MAAC,WAAD;AAAa,IAAA,IAAI,EAAED,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,IAAD;AACI,IAAA,MAAM,YAAKA,IAAI,CAACoB,QAAL,CAAcC,MAAnB,kBADV;AAEI,IAAA,UAAU,EAAC,YAFf;AAGI,IAAA,UAAU,EAAErB,IAAI,CAACoB,QAHrB;AAII,IAAA,UAAU,EAAE,oBAACE,IAAD;AAAA,aACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,OAAD;AACI,QAAA,MAAM,EAAEA,IAAI,CAACL,IAAL,CAAUC,QADtB;AAEI,QAAA,MAAM,EACF,MAAC,IAAD;AAAM,UAAA,IAAI,EAAE;AAAEK,YAAAA,QAAQ,EAAE,OAAZ;AAAqBC,YAAAA,KAAK,EAAE;AAAElB,cAAAA,EAAE,EAAEgB,IAAI,CAACL,IAAL,CAAUX;AAAhB;AAA5B,WAAZ;AAAgE,UAAA,EAAE,kBAAWgB,IAAI,CAACL,IAAL,CAAUX,EAArB,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAASgB,IAAI,CAACL,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CADJ,CADJ,CAHR;AASI,QAAA,OAAO,EAAEI,IAAI,CAACH,OATlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADQ;AAAA,KAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CApCR,CADJ;AA+DH,CArFD;;GAAMpB,Q;UAIeP,W,EACND,W;;;MALTQ,Q;AAuFNA,QAAQ,CAAC0B,SAAT,GAAqB;AACjBzB,EAAAA,IAAI,EAAEjB,SAAS,CAAC2C,KAAV,CAAgB;AAClBpB,IAAAA,EAAE,EAAEvB,SAAS,CAAC4C,MADI;AAElBV,IAAAA,IAAI,EAAElC,SAAS,CAAC6C,MAFE;AAGlBT,IAAAA,OAAO,EAAEpC,SAAS,CAAC4C,MAHD;AAIlBE,IAAAA,SAAS,EAAE9C,SAAS,CAAC6C,MAJH;AAKlBR,IAAAA,QAAQ,EAAErC,SAAS,CAAC+C,OAAV,CAAkB/C,SAAS,CAACgD,GAA5B,CALQ;AAMlBf,IAAAA,MAAM,EAAEjC,SAAS,CAAC+C,OAAV,CAAkB/C,SAAS,CAACgD,GAA5B;AANU,GAAhB;AADW,CAArB;AAWA,eAAehC,QAAf","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { Card, Button, Avatar, Popover, List, Comment } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from \"@ant-design/icons\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport PostImages from \"./PostImages\";\nimport { REMOVE_POST_REQUEST } from \"../reducers/post\";\n// import FollowButton from \"./FollowButton\";\n\nconst CardWrapper = styled.div`\n    margin-bottom: 20px;\n`;\n\nconst PostCard = ({ post }) => {\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\n    const [liked, setLiked] = useState(false);\n\n    const dispatch = useDispatch();\n    const id = useSelector((state) => state.user.me && state.user.me.id);\n\n    const onToggleLike = useCallback(() => {\n        setLiked((prev) => !prev);\n    }, []);\n\n    const onToggleComment = useCallback(() => {\n        setCommentFormOpened((prev) => !prev);\n    }, []);\n\n    const onRemovePost = useCallback(() => {\n        dispatch({\n            type: REMOVE_POST_REQUEST,\n            data: post.id, // 삭제할 게시물의 아이디\n        });\n    }, []);\n\n    return (\n        <CardWrapper key={post.id}>\n            <Card\n                // 이미지가 1개 이상일 때 이미지 표시\n                cover={post.Images[0] && <PostImages images={post.Images} />}\n                actions={[\n                    <RetweetOutlined key=\"retweet\" />,\n                    liked ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onToggleLike} /> : <HeartOutlined key=\"heart\" onClick={onToggleLike} />,\n                    <MessageOutlined key=\"message\" onClick={onToggleComment} />,\n                    <Popover\n                        key=\"ellipsis\"\n                        content={\n                            <Button.Group>\n                                {/* 내가 쓴 글일 때 수정 및 삭제 버튼 표시 */}\n                                {id && post.User.id === id ? (\n                                    <>\n                                        <Button>수정</Button>\n                                        <Button type=\"danger\" onClick={onRemovePost}>\n                                            삭제\n                                        </Button>\n                                    </>\n                                ) : (\n                                    <Button>신고</Button>\n                                )}\n                            </Button.Group>\n                        }\n                    >\n                        <EllipsisOutlined />\n                    </Popover>,\n                ]}\n                // extra={<FollowButton post={post} />}\n            >\n                <Card.Meta avatar={<Avatar>{post.User.nickname[0]}</Avatar>} title={post.User.nickname} description={<PostCardContent postData={post.content} />} />\n            </Card>\n\n            {/* 댓글 구현 */}\n            {commentFormOpened && (\n                <>\n                    <CommentForm post={post} />\n                    <List\n                        header={`${post.Comments.length} 댓글`}\n                        itemLayout=\"horizontal\"\n                        dataSource={post.Comments}\n                        renderItem={(item) => (\n                            <li>\n                                <Comment\n                                    author={item.User.nickname}\n                                    avatar={\n                                        <Link href={{ pathname: \"/user\", query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\n                                            <a>\n                                                <Avatar>{item.User.nickname[0]}</Avatar>\n                                            </a>\n                                        </Link>\n                                    }\n                                    content={item.content}\n                                />\n                            </li>\n                        )}\n                    />\n                </>\n            )}\n        </CardWrapper>\n    );\n};\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        id: PropTypes.string,\n        User: PropTypes.object,\n        content: PropTypes.string,\n        createdAt: PropTypes.object,\n        Comments: PropTypes.arrayOf(PropTypes.any),\n        Images: PropTypes.arrayOf(PropTypes.any),\n    }),\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}