{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortid from \"shortid\"; // user 기본 state 구조\n\nconst initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"동현이\"\n    },\n    content: \"동현이의 첫 번째 게시글! #아잉 #조아요\",\n    Images: [{\n      src: \"https://expanddesk-media.s3.amazonaws.com/hosting/740px-Google_Docs_logo.svg.png\"\n    }, {\n      src: \"https://expanddesk-media.s3.amazonaws.com/hosting/logo_google-drive.png\"\n    }],\n    Comments: [{\n      User: {\n        nickname: \"동현삼\"\n      },\n      content: \"꺄악\"\n    }, {\n      User: {\n        nickname: \"동현사\"\n      },\n      content: \"아이조아\"\n    }]\n  }],\n  // 이미지 업로드할 때의 경로\n  imagePaths: [],\n  // 게시글 추가가 완료되었는지 여부\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  // 댓글 추가가 완료되었는지 여부\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n\nconst dummyPost = data => ({\n  id: shortid.generate(),\n  // 더미 게시글 아이디 생성~!\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"동현이\"\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"동현이\"\n  }\n}); // 액션 오타 방지용\n\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPostAction = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    // 포스트 액션\n    case ADD_POST_REQUEST:\n      console.log(\"reducer add post request\");\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      console.log(\"reducer add post success\");\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      console.log(\"reducer add post failure\");\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n    // 코멘트 액션\n\n    case ADD_COMMENT_REQUEST:\n      console.log(\"reducer add comment request\");\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      const postIndex = state.mainPosts.find(v => v.id === action.data.postId); // 코멘트를 추가할 게시글의 인덱스 찾기\n\n      const post = _objectSpread({}, state.mainPosts[postIndex]); // 코멘트를 추가할 게시글\n\n\n      post.Comments = [dummyComment(action.data.content), ...post.Comments]; // 게시글에 코멘트 추가\n\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = post;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts,\n        addCommentLoading: false,\n        addCommentDone: true\n      });\n\n    case ADD_COMMENT_FAILURE:\n      console.log(\"reducer add comment failure\");\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/reducers/post.js"],"names":["shortid","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","dummyPost","data","generate","dummyComment","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPostAction","type","reducer","state","action","console","log","error","postIndex","find","v","postId","post"],"mappings":"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","sourcesContent":["import shortid from \"shortid\";\n\n// user 기본 state 구조\nconst initialState = {\n    mainPosts: [\n        {\n            id: 1,\n            User: { id: 1, nickname: \"동현이\" },\n            content: \"동현이의 첫 번째 게시글! #아잉 #조아요\",\n            Images: [{ src: \"https://expanddesk-media.s3.amazonaws.com/hosting/740px-Google_Docs_logo.svg.png\" }, { src: \"https://expanddesk-media.s3.amazonaws.com/hosting/logo_google-drive.png\" }],\n            Comments: [\n                {\n                    User: { nickname: \"동현삼\" },\n                    content: \"꺄악\",\n                },\n                {\n                    User: { nickname: \"동현사\" },\n                    content: \"아이조아\",\n                },\n            ],\n        },\n    ],\n    // 이미지 업로드할 때의 경로\n    imagePaths: [],\n\n    // 게시글 추가가 완료되었는지 여부\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n\n    // 댓글 추가가 완료되었는지 여부\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n};\n\nconst dummyPost = (data) => ({\n    id: shortid.generate(), // 더미 게시글 아이디 생성~!\n    content: data,\n    User: { id: 1, nickname: \"동현이\" },\n    Images: [],\n    Comments: [],\n});\n\nconst dummyComment = (data) => ({\n    id: shortid.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: \"동현이\",\n    },\n});\n\n// 액션 오타 방지용\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const addPostAction = (data) => {\n    return {\n        type: ADD_POST_REQUEST,\n        data,\n    };\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        // 포스트 액션\n        case ADD_POST_REQUEST:\n            console.log(\"reducer add post request\");\n            return {\n                ...state,\n                addPostLoading: true,\n                addPostDone: false,\n                addPostError: null,\n            };\n        case ADD_POST_SUCCESS:\n            console.log(\"reducer add post success\");\n            return {\n                ...state,\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\n                addPostLoading: false,\n                addPostDone: true,\n            };\n        case ADD_POST_FAILURE:\n            console.log(\"reducer add post failure\");\n            return {\n                ...state,\n                addPostLoading: false,\n                addPostError: action.error,\n            };\n\n        // 코멘트 액션\n        case ADD_COMMENT_REQUEST:\n            console.log(\"reducer add comment request\");\n            return {\n                ...state,\n                addCommentLoading: true,\n                addCommentDone: false,\n                addCommentError: null,\n            };\n        case ADD_COMMENT_SUCCESS:\n            const postIndex = state.mainPosts.find((v) => v.id === action.data.postId); // 코멘트를 추가할 게시글의 인덱스 찾기\n            const post = { ...state.mainPosts[postIndex] }; // 코멘트를 추가할 게시글\n            post.Comments = [dummyComment(action.data.content), ...post.Comments]; // 게시글에 코멘트 추가\n            const mainPosts = [...state.mainPosts];\n            mainPosts[postIndex] = post;\n            return {\n                ...state,\n                mainPosts,\n                addCommentLoading: false,\n                addCommentDone: true,\n            };\n        case ADD_COMMENT_FAILURE:\n            console.log(\"reducer add comment failure\");\n            return {\n                ...state,\n                addCommentLoading: false,\n                addCommentError: action.error,\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}