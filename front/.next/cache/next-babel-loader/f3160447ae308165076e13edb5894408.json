{"ast":null,"code":"var _jsxFileName = \"/Users/dong/Documents/react-sns/front/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport AppLayout from \"../components/AppLayout\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\n\nconst Home = () => {\n  const {\n    me,\n    loginDone\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n  const myStyles = useRef({\n    background: \"rgb(194,219,219)\",\n    background: \"linear-gradient(180deg, rgba(194,219,219,1) 0%, rgba(220,229,221,1) 100%)\"\n  });\n  const dispatch = useDispatch(); // 유저의 로그인된 정보를 불러오는 액션을 디스패치한다.\n  // 메인 화면을 마운트할 때 포스트를 불러오는 액션을 디스패치한다.\n\n  useEffect(() => {\n    dispatch({\n      type: LOAD_MY_INFO_REQUEST\n    });\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []); // 스크롤을 끝까지 내리면 게시물을 더 불러오는 액션을 디스패치한다.\n\n  useEffect(() => {\n    function onScroll() {\n      // 현재 스크롤 위치(화면 상단 기준), 브라우저 화면의 높이, 총 높이\n      console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight); // 현재 스크롤 위치와 브라우저의 높이를 더했을 때 총 높이가 된다면? 스크롤이 맨 아래에 있다는 뜻. 300픽셀 정도 남겼을 때 로딩하기!\n\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 500) {\n        // 불러올 게시물이 있고, 로딩중이 아닐 경우 요청 디스패치!\n        if (hasMorePost && !loadPostsLoading) {\n          dispatch({\n            type: LOAD_POSTS_REQUEST\n          });\n        }\n      }\n    }\n\n    window.addEventListener(\"scroll\", onScroll); // unmount\n\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePost, loadPostsLoading]);\n  return __jsx(React.Fragment, null, __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    style: myStyles.current,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, loginDone && __jsx(PostForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 35\n    }\n  }), mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  })))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/pages/index.js"],"names":["React","useEffect","useRef","useSelector","useDispatch","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","Home","me","loginDone","state","user","mainPosts","hasMorePost","loadPostsLoading","post","myStyles","background","dispatch","type","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","addEventListener","removeEventListener","current","map","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAEA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,SAASC,oBAAT,QAAqC,kBAArC;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,MAAoBT,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAArC;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,WAAb;AAA0BC,IAAAA;AAA1B,MAA+Cd,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACK,IAAlB,CAAhE;AAEA,QAAMC,QAAQ,GAAGjB,MAAM,CAAC;AAAEkB,IAAAA,UAAU,EAAE,kBAAd;AAAkCA,IAAAA,UAAU,EAAE;AAA9C,GAAD,CAAvB;AAEA,QAAMC,QAAQ,GAAGjB,WAAW,EAA5B,CANe,CAQf;AACA;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACZoB,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEb;AADD,KAAD,CAAR;AAGAY,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEd;AADD,KAAD,CAAR;AAGH,GAPQ,EAON,EAPM,CAAT,CAVe,CAmBf;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACZ,aAASsB,QAAT,GAAoB;AAChB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAnB,EAA4BC,QAAQ,CAACC,eAAT,CAAyBC,YAArD,EAAmEF,QAAQ,CAACC,eAAT,CAAyBE,YAA5F,EAFgB,CAIhB;;AACA,UAAIL,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAArG,EAA0G;AACtG;AACA,YAAIf,WAAW,IAAI,CAACC,gBAApB,EAAsC;AAClCI,UAAAA,QAAQ,CAAC;AACLC,YAAAA,IAAI,EAAEd;AADD,WAAD,CAAR;AAGH;AACJ;AACJ;;AACDkB,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCT,QAAlC,EAfY,CAiBZ;;AACA,WAAO,MAAM;AACTG,MAAAA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCV,QAArC;AACH,KAFD;AAGH,GArBQ,EAqBN,CAACP,WAAD,EAAcC,gBAAd,CArBM,CAAT;AAuBA,SACI,4BACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,KAAK,EAAEE,QAAQ,CAACe,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKtB,SAAS,IAAI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFlB,EAGKG,SAAS,CAACoB,GAAV,CAAejB,IAAD,IACX,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,IAAI,CAACkB,EAApB;AAAwB,IAAA,IAAI,EAAElB,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CAHL,CADJ,CADJ,CADJ;AAaH,CAxDD;;AA0DA,eAAeR,IAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport AppLayout from \"../components/AppLayout\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\n\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\n\nconst Home = () => {\n    const { me, loginDone } = useSelector((state) => state.user);\n    const { mainPosts, hasMorePost, loadPostsLoading } = useSelector((state) => state.post);\n\n    const myStyles = useRef({ background: \"rgb(194,219,219)\", background: \"linear-gradient(180deg, rgba(194,219,219,1) 0%, rgba(220,229,221,1) 100%)\" });\n\n    const dispatch = useDispatch();\n\n    // 유저의 로그인된 정보를 불러오는 액션을 디스패치한다.\n    // 메인 화면을 마운트할 때 포스트를 불러오는 액션을 디스패치한다.\n    useEffect(() => {\n        dispatch({\n            type: LOAD_MY_INFO_REQUEST,\n        });\n        dispatch({\n            type: LOAD_POSTS_REQUEST,\n        });\n    }, []);\n\n    // 스크롤을 끝까지 내리면 게시물을 더 불러오는 액션을 디스패치한다.\n    useEffect(() => {\n        function onScroll() {\n            // 현재 스크롤 위치(화면 상단 기준), 브라우저 화면의 높이, 총 높이\n            console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n\n            // 현재 스크롤 위치와 브라우저의 높이를 더했을 때 총 높이가 된다면? 스크롤이 맨 아래에 있다는 뜻. 300픽셀 정도 남겼을 때 로딩하기!\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 500) {\n                // 불러올 게시물이 있고, 로딩중이 아닐 경우 요청 디스패치!\n                if (hasMorePost && !loadPostsLoading) {\n                    dispatch({\n                        type: LOAD_POSTS_REQUEST,\n                    });\n                }\n            }\n        }\n        window.addEventListener(\"scroll\", onScroll);\n\n        // unmount\n        return () => {\n            window.removeEventListener(\"scroll\", onScroll);\n        };\n    }, [hasMorePost, loadPostsLoading]);\n\n    return (\n        <>\n            <AppLayout>\n                <div style={myStyles.current}>\n                    {/* PostForm 컴포넌트는 로그인 한 상태일 때만 보임 */}\n                    {loginDone && <PostForm />}\n                    {mainPosts.map((post) => (\n                        <PostCard key={post.id} post={post} />\n                    ))}\n                </div>\n            </AppLayout>\n        </>\n    );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}