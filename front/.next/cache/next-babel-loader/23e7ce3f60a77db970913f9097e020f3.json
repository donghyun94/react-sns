{"ast":null,"code":"var _jsxFileName = \"/Users/dong/Documents/react-sns/front/components/PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from \"react\";\nimport { Card, Button, Avatar, Popover, List, Comment } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from \"@ant-design/icons\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport PostImages from \"./PostImages\";\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST } from \"../reducers/post\";\nimport FollowButton from \"./FollowButton\";\nconst CardWrapper = styled.div`\n    margin-bottom: 20px;\n    background: transparent;\n`;\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const dispatch = useDispatch();\n  const id = useSelector(state => state.user.me && state.user.me.id);\n  const {\n    removePostLoading\n  } = useSelector(state => state.post); // 좋아요\n\n  const onLike = useCallback(() => {\n    dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []); // 좋아요 취소\n\n  const onUnlike = useCallback(() => {\n    dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id // 삭제할 게시물의 아이디\n\n    });\n  }, []);\n  const liked = post.Likers.find(v => v.id === id); // 게시글 좋아요 누른 사람들 중에 내가 있는지\n\n  return __jsx(CardWrapper, {\n    key: post.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, __jsx(Card // 이미지가 1개 이상일 때 이미지 표시\n  , {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 42\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnlike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 29\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 102\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"message\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 29\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 41\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 41\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 37\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }\n    }))],\n    extra: id && __jsx(FollowButton, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 30\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 29\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 34\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }), __jsx(List, {\n    header: `${post.Comments.length} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 29\n      }\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: {\n          pathname: \"/user\",\n          query: {\n            id: item.User.id\n          }\n        },\n        as: `/user/${item.User.id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 41\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 45\n        }\n      }, __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 49\n        }\n      }, item.User.nickname[0]))),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 33\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.any),\n    Images: PropTypes.arrayOf(PropTypes.any)\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/components/PostCard.js"],"names":["React","useState","useCallback","Card","Button","Avatar","Popover","List","Comment","PropTypes","RetweetOutlined","HeartTwoTone","HeartOutlined","MessageOutlined","EllipsisOutlined","styled","Link","useSelector","useDispatch","CommentForm","PostCardContent","PostImages","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","FollowButton","CardWrapper","div","PostCard","post","commentFormOpened","setCommentFormOpened","dispatch","id","state","user","me","removePostLoading","onLike","type","data","onUnlike","onToggleComment","prev","onRemovePost","liked","Likers","find","v","Images","User","nickname","content","Comments","length","item","pathname","query","propTypes","shape","number","object","string","createdAt","arrayOf","any"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,MAAvB,EAA+BC,OAA/B,EAAwCC,IAAxC,EAA8CC,OAA9C,QAA6D,MAA7D;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,eAAT,EAA0BC,YAA1B,EAAwCC,aAAxC,EAAuDC,eAAvD,EAAwEC,gBAAxE,QAAgG,mBAAhG;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,mBAAT,EAA8BC,iBAA9B,EAAiDC,mBAAjD,QAA4E,kBAA5E;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,MAAMC,WAAW,GAAGX,MAAM,CAACY,GAAI;;;CAA/B;;AAKA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC3B,QAAM;AAAA,OAACC,iBAAD;AAAA,OAAoBC;AAApB,MAA4C9B,QAAQ,CAAC,KAAD,CAA1D;AAEA,QAAM+B,QAAQ,GAAGd,WAAW,EAA5B;AACA,QAAMe,EAAE,GAAGhB,WAAW,CAAEiB,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,EAAX,IAAiBF,KAAK,CAACC,IAAN,CAAWC,EAAX,CAAcH,EAA3C,CAAtB;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAwBpB,WAAW,CAAEiB,KAAD,IAAWA,KAAK,CAACL,IAAlB,CAAzC,CAL2B,CAO3B;;AACA,QAAMS,MAAM,GAAGpC,WAAW,CAAC,MAAM;AAC7B8B,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEhB,iBADD;AAELiB,MAAAA,IAAI,EAAEX,IAAI,CAACI;AAFN,KAAD,CAAR;AAIH,GALyB,EAKvB,EALuB,CAA1B,CAR2B,CAe3B;;AACA,QAAMQ,QAAQ,GAAGvC,WAAW,CAAC,MAAM;AAC/B8B,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEf,mBADD;AAELgB,MAAAA,IAAI,EAAEX,IAAI,CAACI;AAFN,KAAD,CAAR;AAIH,GAL2B,EAKzB,EALyB,CAA5B;AAOA,QAAMS,eAAe,GAAGxC,WAAW,CAAC,MAAM;AACtC6B,IAAAA,oBAAoB,CAAEY,IAAD,IAAU,CAACA,IAAZ,CAApB;AACH,GAFkC,EAEhC,EAFgC,CAAnC;AAIA,QAAMC,YAAY,GAAG1C,WAAW,CAAC,MAAM;AACnC8B,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEjB,mBADD;AAELkB,MAAAA,IAAI,EAAEX,IAAI,CAACI,EAFN,CAEU;;AAFV,KAAD,CAAR;AAIH,GAL+B,EAK7B,EAL6B,CAAhC;AAOA,QAAMY,KAAK,GAAGhB,IAAI,CAACiB,MAAL,CAAYC,IAAZ,CAAkBC,CAAD,IAAOA,CAAC,CAACf,EAAF,KAASA,EAAjC,CAAd,CAlC2B,CAkCyB;;AAEpD,SACI,MAAC,WAAD;AAAa,IAAA,GAAG,EAAEJ,IAAI,CAACI,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD,CACI;AADJ;AAEI,IAAA,KAAK,EAAEJ,IAAI,CAACoB,MAAL,CAAY,CAAZ,KAAkB,MAAC,UAAD;AAAY,MAAA,MAAM,EAAEpB,IAAI,CAACoB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAF7B;AAGI,IAAA,OAAO,EAAE,CACL,MAAC,eAAD;AAAiB,MAAA,GAAG,EAAC,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,EAELJ,KAAK,GAAG,MAAC,YAAD;AAAc,MAAA,YAAY,EAAC,SAA3B;AAAqC,MAAA,GAAG,EAAC,OAAzC;AAAiD,MAAA,OAAO,EAAEJ,QAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAA4E,MAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,OAAO,EAAEH,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAF5E,EAGL,MAAC,eAAD;AAAiB,MAAA,GAAG,EAAC,SAArB;AAA+B,MAAA,OAAO,EAAEI,eAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHK,EAIL,MAAC,OAAD;AACI,MAAA,GAAG,EAAC,UADR;AAEI,MAAA,OAAO,EACH,MAAC,MAAD,CAAQ,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEKT,EAAE,IAAIJ,IAAI,CAACqB,IAAL,CAAUjB,EAAV,KAAiBA,EAAvB,GACG,4BACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAEI,MAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAEI,iBAA/B;AAAkD,QAAA,OAAO,EAAEO,YAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFJ,CADH,GAQG,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAVR,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAkBI,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBJ,CAJK,CAHb;AA4BI,IAAA,KAAK,EAAEX,EAAE,IAAI,MAAC,YAAD;AAAc,MAAA,IAAI,EAAEJ,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5BjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA8BI,MAAC,IAAD,CAAM,IAAN;AACI,IAAA,MAAM,EAAE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASA,IAAI,CAACqB,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CADZ;AAEI,IAAA,KAAK,EAAEtB,IAAI,CAACqB,IAAL,CAAUC,QAFrB;AAGI,IAAA,WAAW,EAAE,MAAC,eAAD;AAAiB,MAAA,QAAQ,EAAEtB,IAAI,CAACuB,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9BJ,CADJ,EAuCKtB,iBAAiB,IACd,4BACI,MAAC,WAAD;AAAa,IAAA,IAAI,EAAED,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,IAAD;AACI,IAAA,MAAM,EAAG,GAAEA,IAAI,CAACwB,QAAL,CAAcC,MAAO,KADpC;AAEI,IAAA,UAAU,EAAC,YAFf;AAGI,IAAA,UAAU,EAAEzB,IAAI,CAACwB,QAHrB;AAII,IAAA,UAAU,EAAGE,IAAD,IACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,OAAD;AACI,MAAA,MAAM,EAAEA,IAAI,CAACL,IAAL,CAAUC,QADtB;AAEI,MAAA,MAAM,EACF,MAAC,IAAD;AAAM,QAAA,IAAI,EAAE;AAAEK,UAAAA,QAAQ,EAAE,OAAZ;AAAqBC,UAAAA,KAAK,EAAE;AAAExB,YAAAA,EAAE,EAAEsB,IAAI,CAACL,IAAL,CAAUjB;AAAhB;AAA5B,SAAZ;AAAgE,QAAA,EAAE,EAAG,SAAQsB,IAAI,CAACL,IAAL,CAAUjB,EAAG,EAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAASsB,IAAI,CAACL,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CADJ,CADJ,CAHR;AASI,MAAA,OAAO,EAAEI,IAAI,CAACH,OATlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAxCR,CADJ;AAmEH,CAvGD;;AAyGAxB,QAAQ,CAAC8B,SAAT,GAAqB;AACjB7B,EAAAA,IAAI,EAAEpB,SAAS,CAACkD,KAAV,CAAgB;AAClB1B,IAAAA,EAAE,EAAExB,SAAS,CAACmD,MADI;AAElBV,IAAAA,IAAI,EAAEzC,SAAS,CAACoD,MAFE;AAGlBT,IAAAA,OAAO,EAAE3C,SAAS,CAACqD,MAHD;AAIlBC,IAAAA,SAAS,EAAEtD,SAAS,CAACqD,MAJH;AAKlBT,IAAAA,QAAQ,EAAE5C,SAAS,CAACuD,OAAV,CAAkBvD,SAAS,CAACwD,GAA5B,CALQ;AAMlBhB,IAAAA,MAAM,EAAExC,SAAS,CAACuD,OAAV,CAAkBvD,SAAS,CAACwD,GAA5B;AANU,GAAhB;AADW,CAArB;AAWA,eAAerC,QAAf","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { Card, Button, Avatar, Popover, List, Comment } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from \"@ant-design/icons\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport PostImages from \"./PostImages\";\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST } from \"../reducers/post\";\nimport FollowButton from \"./FollowButton\";\n\nconst CardWrapper = styled.div`\n    margin-bottom: 20px;\n    background: transparent;\n`;\n\nconst PostCard = ({ post }) => {\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\n\n    const dispatch = useDispatch();\n    const id = useSelector((state) => state.user.me && state.user.me.id);\n    const { removePostLoading } = useSelector((state) => state.post);\n\n    // 좋아요\n    const onLike = useCallback(() => {\n        dispatch({\n            type: LIKE_POST_REQUEST,\n            data: post.id,\n        });\n    }, []);\n\n    // 좋아요 취소\n    const onUnlike = useCallback(() => {\n        dispatch({\n            type: UNLIKE_POST_REQUEST,\n            data: post.id,\n        });\n    }, []);\n\n    const onToggleComment = useCallback(() => {\n        setCommentFormOpened((prev) => !prev);\n    }, []);\n\n    const onRemovePost = useCallback(() => {\n        dispatch({\n            type: REMOVE_POST_REQUEST,\n            data: post.id, // 삭제할 게시물의 아이디\n        });\n    }, []);\n\n    const liked = post.Likers.find((v) => v.id === id); // 게시글 좋아요 누른 사람들 중에 내가 있는지\n\n    return (\n        <CardWrapper key={post.id}>\n            <Card\n                // 이미지가 1개 이상일 때 이미지 표시\n                cover={post.Images[0] && <PostImages images={post.Images} />}\n                actions={[\n                    <RetweetOutlined key=\"retweet\" />,\n                    liked ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnlike} /> : <HeartOutlined key=\"heart\" onClick={onLike} />,\n                    <MessageOutlined key=\"message\" onClick={onToggleComment} />,\n                    <Popover\n                        key=\"ellipsis\"\n                        content={\n                            <Button.Group>\n                                {/* 내가 쓴 글일 때 수정 및 삭제 버튼 표시 */}\n                                {id && post.User.id === id ? (\n                                    <>\n                                        <Button>수정</Button>\n                                        <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>\n                                            삭제\n                                        </Button>\n                                    </>\n                                ) : (\n                                    <Button>신고</Button>\n                                )}\n                            </Button.Group>\n                        }\n                    >\n                        <EllipsisOutlined />\n                    </Popover>,\n                ]}\n                extra={id && <FollowButton post={post} />}\n            >\n                <Card.Meta\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n                    title={post.User.nickname}\n                    description={<PostCardContent postData={post.content} />}\n                />\n            </Card>\n\n            {/* 댓글 구현 */}\n            {commentFormOpened && (\n                <>\n                    <CommentForm post={post} />\n                    <List\n                        header={`${post.Comments.length} 댓글`}\n                        itemLayout=\"horizontal\"\n                        dataSource={post.Comments}\n                        renderItem={(item) => (\n                            <li>\n                                <Comment\n                                    author={item.User.nickname}\n                                    avatar={\n                                        <Link href={{ pathname: \"/user\", query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\n                                            <a>\n                                                <Avatar>{item.User.nickname[0]}</Avatar>\n                                            </a>\n                                        </Link>\n                                    }\n                                    content={item.content}\n                                />\n                            </li>\n                        )}\n                    />\n                </>\n            )}\n        </CardWrapper>\n    );\n};\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        id: PropTypes.number,\n        User: PropTypes.object,\n        content: PropTypes.string,\n        createdAt: PropTypes.string,\n        Comments: PropTypes.arrayOf(PropTypes.any),\n        Images: PropTypes.arrayOf(PropTypes.any),\n    }),\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}