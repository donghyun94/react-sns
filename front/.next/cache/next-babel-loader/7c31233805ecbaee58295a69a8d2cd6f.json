{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/dong/Documents/react-sns/front/components/CommentForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Button, Form, Input } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentDone = _useSelector.addCommentDone,\n      addCommentLoading = _useSelector.addCommentLoading;\n\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n\n  var _useState = useState(\"\"),\n      commentText = _useState[0],\n      setCommentText = _useState[1]; // 코멘트 추가가 완료되면 코멘트 입력 창을 비운다.\n\n\n  useEffect(function () {\n    if (addCommentDone) {\n      setCommentText(\"\");\n    }\n  }, [addCommentDone]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, [commentText]);\n  var onSubmitComment = useCallback(function () {\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        userId: id,\n        postId: post.id\n      }\n    });\n  }, [commentText, id]);\n  return __jsx(Form, {\n    onFinish: onSubmitComment,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    style: {\n      position: \"relative\",\n      margin: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }), __jsx(Button, {\n    style: {\n      position: \"absolute\",\n      right: 0,\n      bottom: -40,\n      zIndex: 2\n    },\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: addCommentLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, \"\\uC090\\uC57D\")));\n};\n\n_s(CommentForm, \"lh6lQyQGu0kH3FzamT5kju2B6vY=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/components/CommentForm.js"],"names":["Button","Form","Input","React","useCallback","useEffect","useState","PropTypes","useDispatch","useSelector","ADD_COMMENT_REQUEST","CommentForm","post","dispatch","state","addCommentDone","addCommentLoading","id","user","me","commentText","setCommentText","onChangeCommentText","e","target","value","onSubmitComment","type","data","content","userId","postId","position","margin","right","bottom","zIndex","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import { Button, Form, Input } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\n\nconst CommentForm = ({ post }) => {\n    const dispatch = useDispatch();\n    const { addCommentDone, addCommentLoading } = useSelector((state) => state.post);\n    const id = useSelector((state) => state.user.me?.id);\n    const [commentText, setCommentText] = useState(\"\");\n\n    // 코멘트 추가가 완료되면 코멘트 입력 창을 비운다.\n    useEffect(() => {\n        if (addCommentDone) {\n            setCommentText(\"\");\n        }\n    }, [addCommentDone]);\n\n    const onChangeCommentText = useCallback(\n        (e) => {\n            setCommentText(e.target.value);\n        },\n        [commentText]\n    );\n\n    const onSubmitComment = useCallback(() => {\n        dispatch({\n            type: ADD_COMMENT_REQUEST,\n            data: { content: commentText, userId: id, postId: post.id },\n        });\n    }, [commentText, id]);\n\n    return (\n        <Form onFinish={onSubmitComment}>\n            <Form.Item style={{ position: \"relative\", margin: 0 }}>\n                <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\n                <Button style={{ position: \"absolute\", right: 0, bottom: -40, zIndex: 2 }} type=\"primary\" htmlType=\"submit\" loading={addCommentLoading}>\n                    삐약\n                </Button>\n            </Form.Item>\n        </Form>\n    );\n};\n\nCommentForm.propTypes = {\n    post: PropTypes.object.isRequired,\n};\n\nexport default CommentForm;\n"]},"metadata":{},"sourceType":"module"}