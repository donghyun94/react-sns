{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortid from \"shortid\";\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostAPI(data) {\n  return 0;\n} // 게시글 추가\n\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          id = shortid.generate();\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          console.log(\"saga add post success\");\n          _context.next = 15;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n} // 게시글 삭제\n\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/api/post\", data);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data // 지울 게시글의 아이디가 들어있음\n\n          });\n\n        case 5:\n          _context2.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          console.log(\"saga remove post success\");\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          console.log(\"saga add comment success\");\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/sagas/post.js"],"names":["addPost","removePost","addComment","watchLoadPost","watchAddPost","watchRemovePost","watchAddComment","postSaga","all","fork","call","put","takeLatest","delay","axios","shortid","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","data","addPostAPI","post","action","id","generate","type","content","console","log","error","response","removePostAPI","addCommentAPI","postId"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortid from \"shortid\";\n\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostAPI(data) {\n    return 0;\n}\n\n// 게시글 추가\nfunction addPostAPI(data) {\n    return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n    try {\n        // const result = yield call(addPostAPI, action.data);\n        yield delay(2000);\n        const id = shortid.generate();\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: { id, content: action.data },\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: id,\n        });\n        console.log(\"saga add post success\");\n    } catch (err) {\n        yield put({ type: ADD_POST_FAILURE, error: err.response.data });\n    }\n}\n\n// 게시글 삭제\nfunction removePostAPI(data) {\n    return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n    try {\n        // const result = yield call(addPostAPI, action.data);\n        yield delay(2000);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data, // 지울 게시글의 아이디가 들어있음\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data,\n        });\n        console.log(\"saga remove post success\");\n    } catch (err) {\n        yield put({ type: REMOVE_POST_FAILURE, error: err.response.data });\n    }\n}\n\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n    try {\n        // const result = yield call(addCommentAPI, action.data);\n        yield delay(2000);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data,\n        });\n        console.log(\"saga add comment success\");\n    } catch (err) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchLoadPost() {\n    yield takeLatest(LOAD_POSTS_REQUEST, addPost);\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}\n"]},"metadata":{},"sourceType":"module"}