{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(follow),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(unfollow),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchFollow),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnfollow),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE } from \"../reducers/user\"; // 서버에 데이터를 요청하는 함수. 얘는 제네레이터 아님!\n\nfunction signUpAPI() {\n  return axios.post(\"http://localhost:3065/user\");\n} // SIGN_UP_REQUEST 액션 함수(리듀서 안의 signupRequestAction)에 담긴 데이터가 자동으로 signUp 함수의 매개변수로 전달 됨.\n\n\nfunction signUp(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function signUp$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log(result);\n          _context.next = 7;\n          return delay(2000);\n\n        case 7:\n          console.log(\"saga signup request\");\n          _context.next = 10;\n          return put({\n            type: SIGN_UP_SUCCESS // data: result.data\n\n          });\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 16;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(2000);\n\n        case 3:\n          console.log(\"saga login request\"); // put: dispatch와 같은 기능을 하는 이펙트\n\n          _context2.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: action.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n} // 로그아웃도 비슷한 패턴으로 제작하여 사용\n\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(2000);\n\n        case 3:\n          console.log(\"saga logout request\");\n          _context3.next = 6;\n          return put({\n            type: LOG_OUT_SUCCESS // data: result.data\n\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction followAPI() {\n  return axios.post(\"/api/signup\");\n}\n\nfunction follow(action) {\n  return _regeneratorRuntime.wrap(function follow$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return delay(2000);\n\n        case 3:\n          console.log(\"saga follow request\");\n          _context4.next = 6;\n          return put({\n            type: FOLLOW_SUCCESS,\n            data: action.data\n          });\n\n        case 6:\n          _context4.next = 12;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 12;\n          return put({\n            type: FOLLOW_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction unfollowAPI() {\n  return axios.post(\"/api/signup\");\n}\n\nfunction unfollow(action) {\n  return _regeneratorRuntime.wrap(function unfollow$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return delay(2000);\n\n        case 3:\n          console.log(\"saga unfollow request\");\n          _context5.next = 6;\n          return put({\n            type: UNFOLLOW_SUCCESS,\n            data: action.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: UNFOLLOW_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n} // eventlistener와 같은 역할을 하는 함수. 로그인 요청 액션을 감지한다.\n\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchFollow() {\n  return _regeneratorRuntime.wrap(function watchFollow$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(FOLLOW_REQUEST, follow);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchUnfollow() {\n  return _regeneratorRuntime.wrap(function watchUnfollow$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(UNFOLLOW_REQUEST, unfollow);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp), fork(watchFollow), fork(watchUnfollow)]);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/sagas/user.js"],"names":["signUp","logIn","logOut","follow","unfollow","watchLogIn","watchLogOut","watchSignUp","watchFollow","watchUnfollow","userSaga","all","fork","call","put","takeLatest","delay","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","signUpAPI","post","action","data","result","console","log","type","error","response","logInAPI","logOutAPI","followAPI","unfollowAPI"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE } from \"../reducers/user\";\n\n// 서버에 데이터를 요청하는 함수. 얘는 제네레이터 아님!\nfunction signUpAPI() {\n    return axios.post(\"http://localhost:3065/user\");\n}\n\n// SIGN_UP_REQUEST 액션 함수(리듀서 안의 signupRequestAction)에 담긴 데이터가 자동으로 signUp 함수의 매개변수로 전달 됨.\nfunction* signUp(action) {\n    try {\n        // call: 비동기 함수를 실행하는 이펙트. 여기서는 signUpAPI가 데이터를 받아올 때까지 기다림\n        // call의 두 번째 인자인 action.data가 signupAPI의 인자로 들어간다.\n        const result = yield call(signUpAPI, action.data);\n        console.log(result);\n        yield delay(2000);\n        console.log(\"saga signup request\");\n        yield put({\n            type: SIGN_UP_SUCCESS,\n            // data: result.data\n        });\n    } catch (err) {\n        yield put({ type: SIGN_UP_FAILURE, error: err.response.data });\n    }\n}\n\nfunction logInAPI(data) {\n    return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n    try {\n        yield delay(2000);\n        console.log(\"saga login request\");\n        // put: dispatch와 같은 기능을 하는 이펙트\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({ type: LOG_IN_FAILURE, error: err.response.data });\n    }\n}\n\n// 로그아웃도 비슷한 패턴으로 제작하여 사용\nfunction logOutAPI() {\n    return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n    try {\n        // const result = yield call(logOutAPI);\n        yield delay(2000);\n        console.log(\"saga logout request\");\n        yield put({\n            type: LOG_OUT_SUCCESS,\n            // data: result.data\n        });\n    } catch (err) {\n        yield put({ type: LOG_OUT_FAILURE, error: err.response.data });\n    }\n}\n\nfunction followAPI() {\n    return axios.post(\"/api/signup\");\n}\n\nfunction* follow(action) {\n    try {\n        // const result = yield call(signUpAPI);\n        yield delay(2000);\n        console.log(\"saga follow request\");\n        yield put({\n            type: FOLLOW_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({ type: FOLLOW_FAILURE, error: err.response.data });\n    }\n}\n\nfunction unfollowAPI() {\n    return axios.post(\"/api/signup\");\n}\n\nfunction* unfollow(action) {\n    try {\n        // const result = yield call(signUpAPI);\n        yield delay(2000);\n        console.log(\"saga unfollow request\");\n        yield put({\n            type: UNFOLLOW_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({ type: UNFOLLOW_FAILURE, error: err.response.data });\n    }\n}\n\n// eventlistener와 같은 역할을 하는 함수. 로그인 요청 액션을 감지한다.\nfunction* watchLogIn() {\n    // take: 해당 액션이 실행될 때 까지 기다렸다가, 두 번째 인자의 함수를 실행한다. (take는 1회용, takeEvery는 계속 사용)\n    // takeLatest: 마우스로 광클해서 요청을 무지하게 보내도 마지막 요청에만 응답하게끔 해줌. (하지만 무수한 요청은 막을 수 없음)\n    // throttle: 마우스로 광클해도 일정 시간동안 한번의 요청만 보낼 수 있게 해줌.\n    yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchFollow() {\n    yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nexport default function* userSaga() {\n    yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp), fork(watchFollow), fork(watchUnfollow)]); // fork: 비동기가 아닌 동기 함수를 실행하는 이펙트\n}\n"]},"metadata":{},"sourceType":"module"}