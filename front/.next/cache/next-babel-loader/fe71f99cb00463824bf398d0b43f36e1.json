{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadUser),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(changeNickname),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(follow),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(unfollow),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUser),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchChangeNickname),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchFollow),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnfollow),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, CHANGE_NICKNAME_REQUEST, CHANGE_NICKNAME_SUCCESS, CHANGE_NICKNAME_FAILURE } from \"../reducers/user\"; // 서버에 데이터를 요청하는 함수. 얘는 제네레이터 아님!\n\nfunction signUpAPI(data) {\n  return axios.post(\"/user\", data);\n} // SIGN_UP_REQUEST 액션 함수(리듀서 안의 signupRequestAction)에 담긴 데이터가 자동으로 signUp 함수의 매개변수로 전달 됨.\n\n\nfunction signUp(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function signUp$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log(result);\n          console.log(\"saga signup request\");\n          _context.next = 8;\n          return put({\n            type: SIGN_UP_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction logInAPI(data) {\n  return axios.post(\"/user/login\", data);\n}\n\nfunction logIn(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(logInAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n} // 로그아웃도 비슷한 패턴으로 제작하여 사용\n\n\nfunction logOutAPI() {\n  return axios.post(\"/user/logout\");\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(logOutAPI);\n\n        case 3:\n          console.log(\"saga logout request\");\n          _context3.next = 6;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n} // 로그인 된 유저의 정보 불러오기\n\n\nfunction loadUserAPI() {\n  return axios.get(\"/user\");\n}\n\nfunction loadUser(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUser$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(loadUserAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          console.log(\"saga load user success\");\n          _context4.next = 7;\n          return put({\n            type: LOAD_MY_INFO_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context4.next = 13;\n          break;\n\n        case 9:\n          _context4.prev = 9;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 13;\n          return put({\n            type: LOAD_MY_INFO_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 9]]);\n} // 닉네임 바꾸기\n\n\nfunction changeNicknameAPI() {\n  return axios.patch(\"/user/nickname\");\n}\n\nfunction changeNickname(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function changeNickname$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(changeNicknameAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: CHANGE_NICKNAME_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: CHANGE_NICKNAME_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction followAPI() {\n  return axios.post(\"/user/follow\");\n}\n\nfunction follow(action) {\n  return _regeneratorRuntime.wrap(function follow$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return delay(2000);\n\n        case 3:\n          console.log(\"saga follow request\");\n          _context6.next = 6;\n          return put({\n            type: FOLLOW_SUCCESS,\n            data: action.data\n          });\n\n        case 6:\n          _context6.next = 12;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          _context6.next = 12;\n          return put({\n            type: FOLLOW_FAILURE,\n            error: _context6.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction unfollowAPI() {\n  return axios.post(\"/user/follow\");\n}\n\nfunction unfollow(action) {\n  return _regeneratorRuntime.wrap(function unfollow$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return delay(2000);\n\n        case 3:\n          console.log(\"saga unfollow request\");\n          _context7.next = 6;\n          return put({\n            type: UNFOLLOW_SUCCESS,\n            data: action.data\n          });\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put({\n            type: UNFOLLOW_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n} // eventlistener와 같은 역할을 하는 함수. 로그인 요청 액션을 감지한다.\n\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchLoadUser() {\n  return _regeneratorRuntime.wrap(function watchLoadUser$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(LOAD_MY_INFO_REQUEST, loadUser);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchChangeNickname() {\n  return _regeneratorRuntime.wrap(function watchChangeNickname$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchFollow() {\n  return _regeneratorRuntime.wrap(function watchFollow$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeLatest(FOLLOW_REQUEST, follow);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchUnfollow() {\n  return _regeneratorRuntime.wrap(function watchUnfollow$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UNFOLLOW_REQUEST, unfollow);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp), fork(watchChangeNickname), fork(watchFollow), fork(watchUnfollow)]);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/sagas/user.js"],"names":["signUp","logIn","logOut","loadUser","changeNickname","follow","unfollow","watchLogIn","watchLogOut","watchLoadUser","watchSignUp","watchChangeNickname","watchFollow","watchUnfollow","userSaga","all","fork","call","put","takeLatest","delay","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","CHANGE_NICKNAME_REQUEST","CHANGE_NICKNAME_SUCCESS","CHANGE_NICKNAME_FAILURE","signUpAPI","data","post","action","result","console","log","type","error","response","logInAPI","logOutAPI","loadUserAPI","get","changeNicknameAPI","patch","followAPI","unfollowAPI"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nimport {\n    LOG_IN_REQUEST,\n    LOG_IN_SUCCESS,\n    LOG_IN_FAILURE,\n    LOG_OUT_REQUEST,\n    LOG_OUT_SUCCESS,\n    LOG_OUT_FAILURE,\n    LOAD_MY_INFO_REQUEST,\n    LOAD_MY_INFO_SUCCESS,\n    LOAD_MY_INFO_FAILURE,\n    SIGN_UP_REQUEST,\n    SIGN_UP_SUCCESS,\n    SIGN_UP_FAILURE,\n    FOLLOW_REQUEST,\n    FOLLOW_SUCCESS,\n    FOLLOW_FAILURE,\n    UNFOLLOW_REQUEST,\n    UNFOLLOW_SUCCESS,\n    UNFOLLOW_FAILURE,\n    CHANGE_NICKNAME_REQUEST,\n    CHANGE_NICKNAME_SUCCESS,\n    CHANGE_NICKNAME_FAILURE,\n} from \"../reducers/user\";\n\n// 서버에 데이터를 요청하는 함수. 얘는 제네레이터 아님!\nfunction signUpAPI(data) {\n    return axios.post(\"/user\", data);\n}\n\n// SIGN_UP_REQUEST 액션 함수(리듀서 안의 signupRequestAction)에 담긴 데이터가 자동으로 signUp 함수의 매개변수로 전달 됨.\nfunction* signUp(action) {\n    try {\n        // call: 비동기 함수를 실행하는 이펙트. 여기서는 signUpAPI가 데이터를 받아올 때까지 기다림\n        // call의 두 번째 인자인 action.data가 signUpAPI의 인자로 들어간다.\n        const result = yield call(signUpAPI, action.data);\n        console.log(result);\n        console.log(\"saga signup request\");\n        yield put({\n            type: SIGN_UP_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        // 상태코드가 400~500번대일 경우 실패\n        yield put({ type: SIGN_UP_FAILURE, error: err.response.data });\n    }\n}\n\nfunction logInAPI(data) {\n    return axios.post(\"/user/login\", data);\n}\n\nfunction* logIn(action) {\n    try {\n        const result = yield call(logInAPI, action.data);\n        // put: dispatch와 같은 기능을 하는 이펙트\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({ type: LOG_IN_FAILURE, error: err.response.data });\n    }\n}\n\n// 로그아웃도 비슷한 패턴으로 제작하여 사용\nfunction logOutAPI() {\n    return axios.post(\"/user/logout\");\n}\n\nfunction* logOut() {\n    try {\n        yield call(logOutAPI);\n        console.log(\"saga logout request\");\n        yield put({\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch (err) {\n        yield put({ type: LOG_OUT_FAILURE, error: err.response.data });\n    }\n}\n\n// 로그인 된 유저의 정보 불러오기\nfunction loadUserAPI() {\n    return axios.get(\"/user\");\n}\n\nfunction* loadUser(action) {\n    try {\n        const result = yield call(loadUserAPI, action.data);\n        console.log(\"saga load user success\");\n        yield put({\n            type: LOAD_MY_INFO_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({ type: LOAD_MY_INFO_FAILURE, error: err.response.data });\n    }\n}\n\n// 닉네임 바꾸기\nfunction changeNicknameAPI() {\n    return axios.patch(\"/user/nickname\");\n}\nfunction* changeNickname(action) {\n    try {\n        const result = yield call(changeNicknameAPI, action.data);\n        yield put({\n            type: CHANGE_NICKNAME_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: CHANGE_NICKNAME_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction followAPI() {\n    return axios.post(\"/user/follow\");\n}\n\nfunction* follow(action) {\n    try {\n        // const result = yield call(signUpAPI);\n        yield delay(2000);\n        console.log(\"saga follow request\");\n        yield put({\n            type: FOLLOW_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({ type: FOLLOW_FAILURE, error: err.response.data });\n    }\n}\n\nfunction unfollowAPI() {\n    return axios.post(\"/user/follow\");\n}\n\nfunction* unfollow(action) {\n    try {\n        // const result = yield call(signUpAPI);\n        yield delay(2000);\n        console.log(\"saga unfollow request\");\n        yield put({\n            type: UNFOLLOW_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({ type: UNFOLLOW_FAILURE, error: err.response.data });\n    }\n}\n\n// eventlistener와 같은 역할을 하는 함수. 로그인 요청 액션을 감지한다.\nfunction* watchLogIn() {\n    // take: 해당 액션이 실행될 때 까지 기다렸다가, 두 번째 인자의 함수를 실행한다. (take는 1회용, takeEvery는 계속 사용)\n    // takeLatest: 마우스로 광클해서 요청을 무지하게 보내도 마지막 요청에만 응답하게끔 해줌. (하지만 무수한 요청은 막을 수 없음)\n    // throttle: 마우스로 광클해도 일정 시간동안 한번의 요청만 보낼 수 있게 해줌.\n    yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchLoadUser() {\n    yield takeLatest(LOAD_MY_INFO_REQUEST, loadUser);\n}\n\nfunction* watchSignUp() {\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchChangeNickname() {\n    yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\n}\n\nfunction* watchFollow() {\n    yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nexport default function* userSaga() {\n    yield all([fork(watchLogIn), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp), fork(watchChangeNickname), fork(watchFollow), fork(watchUnfollow)]); // fork: 비동기가 아닌 동기 함수를 실행하는 이펙트\n}\n"]},"metadata":{},"sourceType":"module"}