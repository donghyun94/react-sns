{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\"; // 서버에 데이터를 요청하는 함수. 얘는 제네레이터 아님!\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          // call: 비동기 함수를 실행하는 이펙트. 여기서는 logInAPI가 데이터를 받아올 때까지 기다림\n          // call의 두 번째 인자인 action.data가 logInAPI의 인자로 들어간다.\n          // const result = yield call(logInAPI, action.data);\n          console.log(\"saga login request\");\n          delay(1000); // put: dispatch와 비슷한 기능\n\n          _context.next = 5;\n          return put({\n            type: \"LOG_IN_SUCCESS\",\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: \"LOG_IN_FAILURE\",\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n} // 로그아웃도 비슷한 패턴으로 제작하여 사용\n\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          // const result = yield call(logOutAPI);\n          delay(1000);\n          _context2.next = 4;\n          return put({\n            type: \"LOG_OUT_SUCCESS\",\n            data: result.data\n          });\n\n        case 4:\n          _context2.next = 10;\n          break;\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 10;\n          return put({\n            type: \"LOG_OUT_FAILURE\",\n            data: _context2.t0.response.data\n          });\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 6]]);\n} // eventlistener와 같은 역할을 하는 함수. 로그인 요청을 감지한다.\n\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(\"LOG_IN_REQUEST\", logIn);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(\"LOG_OUT_REQUEST\", logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/sagas/user.js"],"names":["logIn","logOut","watchLogIn","watchLogOut","userSaga","all","fork","call","put","takeLatest","delay","axios","logInAPI","data","post","action","console","log","type","response","logOutAPI","result"],"mappings":";;oDAQUA,K;qDAwBAC,M;qDAcAC,U;qDAOAC,W;qDAIeC,Q;;AAzDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,KAA3C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,SAAUb,KAAV,CAAgBe,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ;AACA;AACA;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAP,UAAAA,KAAK,CAAC,IAAD,CAAL,CAPR,CASQ;;AATR;AAUQ,iBAAMF,GAAG,CAAC;AACNU,YAAAA,IAAI,EAAE,gBADA;AAENL,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,WAAD,CAAT;;AAVR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAeQ,iBAAML,GAAG,CAAC;AAAEU,YAAAA,IAAI,EAAE,gBAAR;AAA0BL,YAAAA,IAAI,EAAE,YAAIM,QAAJ,CAAaN;AAA7C,WAAD,CAAT;;AAfR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAmBA;;;AACA,SAASO,SAAT,GAAqB;AACjB,SAAOT,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,SAAUb,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ;AACAS,UAAAA,KAAK,CAAC,IAAD,CAAL;AAHR;AAIQ,iBAAMF,GAAG,CAAC;AACNU,YAAAA,IAAI,EAAE,iBADA;AAENL,YAAAA,IAAI,EAAEQ,MAAM,CAACR;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAML,GAAG,CAAC;AAAEU,YAAAA,IAAI,EAAE,iBAAR;AAA2BL,YAAAA,IAAI,EAAE,aAAIM,QAAJ,CAAaN;AAA9C,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAaA;;;AACA,SAAUX,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAII,iBAAMO,UAAU,CAAC,gBAAD,EAAmBT,KAAnB,CAAhB;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAAC,iBAAD,EAAoBR,MAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACJ,UAAD,CAAL,EAAmBI,IAAI,CAACH,WAAD,CAAvB,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n// 서버에 데이터를 요청하는 함수. 얘는 제네레이터 아님!\nfunction logInAPI(data) {\n    return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n    // 요청이 성공했을 경우 try 실행, 실패했을 경우 catch 실행\n    try {\n        // call: 비동기 함수를 실행하는 이펙트. 여기서는 logInAPI가 데이터를 받아올 때까지 기다림\n        // call의 두 번째 인자인 action.data가 logInAPI의 인자로 들어간다.\n        // const result = yield call(logInAPI, action.data);\n        console.log(\"saga login request\");\n        delay(1000);\n\n        // put: dispatch와 비슷한 기능\n        yield put({\n            type: \"LOG_IN_SUCCESS\",\n            data: action.data\n        });\n    } catch (err) {\n        yield put({ type: \"LOG_IN_FAILURE\", data: err.response.data });\n    }\n}\n\n// 로그아웃도 비슷한 패턴으로 제작하여 사용\nfunction logOutAPI() {\n    return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n    try {\n        // const result = yield call(logOutAPI);\n        delay(1000);\n        yield put({\n            type: \"LOG_OUT_SUCCESS\",\n            data: result.data\n        });\n    } catch (err) {\n        yield put({ type: \"LOG_OUT_FAILURE\", data: err.response.data });\n    }\n}\n\n// eventlistener와 같은 역할을 하는 함수. 로그인 요청을 감지한다.\nfunction* watchLogIn() {\n    // take: 해당 액션이 실행될 때 까지 기다렸다가, 두 번째 인자의 함수를 실행한다. (take는 1회용, takeEvery는 계속 사용)\n    // takeLatest: 마우스로 광클해서 요청을 무지하게 보내도 마지막 요청에만 응답하게끔 해줌. (하지만 무수한 요청은 막을 수 없음)\n    // throttle: 마우스로 광클해도 일정 시간동안 한번의 요청만 보낼 수 있게 해줌.\n    yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n    yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nexport default function* userSaga() {\n    yield all([fork(watchLogIn), fork(watchLogOut)]); // fork: 비동기가 아닌 동기 함수를 실행하는 이펙트\n}\n"]},"metadata":{},"sourceType":"module"}