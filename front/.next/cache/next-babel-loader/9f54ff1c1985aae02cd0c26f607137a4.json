{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nconst initState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n}; // 이것이 액션이다.\n\nexport const loginAction = data => {\n  return {\n    type: \"LOG_IN\",\n    data\n  };\n};\nexport const logoutAction = () => {\n  return {\n    type: \"LOG_OUT\"\n  };\n}; // 이것이 reducer. (이전상태, 액션) => 다음상태\n\nconst rootReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"HYDRATE\":\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case \"LOG_IN\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case \"LOG_OUT\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/ch1/front/reducers/index.js"],"names":["HYDRATE","initState","user","isLoggedIn","signUpData","loginData","post","mainPosts","loginAction","data","type","logoutAction","rootReducer","state","action","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,IAAI,EAAE;AACFC,IAAAA,UAAU,EAAE,KADV;AAEFD,IAAAA,IAAI,EAAE,IAFJ;AAGFE,IAAAA,UAAU,EAAE,EAHV;AAIFC,IAAAA,SAAS,EAAE;AAJT,GADQ;AAOdC,EAAAA,IAAI,EAAE;AACFC,IAAAA,SAAS,EAAE;AADT;AAPQ,CAAlB,C,CAYA;;AACA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAE,QADH;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHD,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJM,C,CAMP;;AACA,MAAME,WAAW,GAAG,CAACC,KAAK,GAAGZ,SAAT,EAAoBa,MAApB,KAA+B;AAC/C,UAAQA,MAAM,CAACJ,IAAf;AACI,SAAK,SAAL;AACI,6CAAYG,KAAZ,GAAsBC,MAAM,CAACC,OAA7B;;AACJ,SAAK,QAAL;AACI,6CACOF,KADP;AAEIX,QAAAA,IAAI,kCACGW,KAAK,CAACX,IADT;AAEAC,UAAAA,UAAU,EAAE,IAFZ;AAGAD,UAAAA,IAAI,EAAEY,MAAM,CAACL;AAHb;AAFR;;AAQJ,SAAK,SAAL;AACI,6CACOI,KADP;AAEIX,QAAAA,IAAI,kCACGW,KAAK,CAACX,IADT;AAEAC,UAAAA,UAAU,EAAE,KAFZ;AAGAD,UAAAA,IAAI,EAAE;AAHN;AAFR;;AAQJ;AACI,aAAOW,KAAP;AAtBR;AAwBH,CAzBD;;AA2BA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\n\nconst initState = {\n    user: {\n        isLoggedIn: false,\n        user: null,\n        signUpData: {},\n        loginData: {}\n    },\n    post: {\n        mainPosts: []\n    }\n};\n\n// 이것이 액션이다.\nexport const loginAction = (data) => {\n    return {\n        type: \"LOG_IN\",\n        data\n    };\n};\n\nexport const logoutAction = () => {\n    return {\n        type: \"LOG_OUT\"\n    };\n};\n\n// 이것이 reducer. (이전상태, 액션) => 다음상태\nconst rootReducer = (state = initState, action) => {\n    switch (action.type) {\n        case \"HYDRATE\":\n            return { ...state, ...action.payload };\n        case \"LOG_IN\":\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    isLoggedIn: true,\n                    user: action.data\n                }\n            };\n        case \"LOG_OUT\":\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    isLoggedIn: false,\n                    user: null\n                }\n            };\n        default:\n            return state;\n    }\n};\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}