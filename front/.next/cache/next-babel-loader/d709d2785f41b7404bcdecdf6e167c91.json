{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortid from \"shortid\";\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\"; // 게시물 불러오기\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/post\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result=yield call(loadPostsAPI, action.data);\n    yield delay(2000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10) // 불러올 게시물\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n} // 게시글 추가\n\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(2000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n    console.log(\"saga add post success\");\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n} // 게시글 삭제\n\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(2000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data // 지울 게시글의 아이디가 들어있음\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n    console.log(\"saga remove post success\");\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n    console.log(\"saga add comment success\");\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/sagas/post.js"],"names":["all","fork","call","put","takeLatest","delay","axios","shortid","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","type","err","error","response","addPostAPI","post","addPost","id","generate","content","console","log","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPost","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortid from \"shortid\";\n\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\n// 게시물 불러오기\nfunction loadPostsAPI(data) {\n    return axios.get(\"/api/post\", data);\n}\nfunction* loadPosts(action) {\n    try {\n        // const result=yield call(loadPostsAPI, action.data);\n        yield delay(2000);\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: generateDummyPost(10), // 불러올 게시물\n        });\n    } catch (err) {\n        yield put({ type: LOAD_POSTS_FAILURE, error: err.response.data });\n    }\n}\n\n// 게시글 추가\nfunction addPostAPI(data) {\n    return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n    try {\n        // const result = yield call(addPostAPI, action.data);\n        yield delay(2000);\n        const id = shortid.generate();\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: { id, content: action.data },\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: id,\n        });\n        console.log(\"saga add post success\");\n    } catch (err) {\n        yield put({ type: ADD_POST_FAILURE, error: err.response.data });\n    }\n}\n\n// 게시글 삭제\nfunction removePostAPI(data) {\n    return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n    try {\n        // const result = yield call(addPostAPI, action.data);\n        yield delay(2000);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data, // 지울 게시글의 아이디가 들어있음\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data,\n        });\n        console.log(\"saga remove post success\");\n    } catch (err) {\n        yield put({ type: REMOVE_POST_FAILURE, error: err.response.data });\n    }\n}\n\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n    try {\n        // const result = yield call(addCommentAPI, action.data);\n        yield delay(2000);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data,\n        });\n        console.log(\"saga add comment success\");\n    } catch (err) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchLoadPost() {\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}\n"]},"metadata":{},"sourceType":"module"}