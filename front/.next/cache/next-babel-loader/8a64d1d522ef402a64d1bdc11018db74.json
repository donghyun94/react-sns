{"ast":null,"code":"// redux 세팅\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from \"../reducers\";\nimport rootSaga from \"../sagas\"; // state와 reducer를 포함하는 것이 바로 store이다.\n\nvar configureStore = function configureStore(context) {\n  console.log(context);\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware]; // redux 개발 도구와 연동하기 위한 enhancer. 배포용일 경우에는 개발 도구와 연동하지 않도록 한다.\n\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}; // debug가 true이면 개발 모드\n\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/store/configureStore.js"],"names":["createWrapper","createStore","applyMiddleware","compose","createSagaMiddleware","composeWithDevTools","reducer","rootSaga","configureStore","context","console","log","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAa;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAEA,MAAMG,cAAc,GAAGR,oBAAoB,EAA3C;AACA,MAAMS,WAAW,GAAG,CAACD,cAAD,CAApB,CAJgC,CAMhC;;AACA,MAAME,QAAQ,GAAG,QAAwCX,OAAO,CAACD,eAAe,MAAf,SAAmBW,WAAnB,CAAD,CAA/C,GAAmFR,mBAAmB,CAACH,eAAe,MAAf,SAAmBW,WAAnB,CAAD,CAAvH;AAEA,MAAME,KAAK,GAAGd,WAAW,CAACK,OAAD,EAAUQ,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBV,QAAnB,CAAjB;AAEA,SAAOQ,KAAP;AACH,CAbD,C,CAeA;;;AACA,IAAMG,OAAO,GAAGlB,aAAa,CAACQ,cAAD,EAAiB;AAAEW,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["// redux 세팅\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport reducer from \"../reducers\";\nimport rootSaga from \"../sagas\";\n\n// state와 reducer를 포함하는 것이 바로 store이다.\nconst configureStore = (context) => {\n    console.log(context);\n\n    const sagaMiddleware = createSagaMiddleware();\n    const middlewares = [sagaMiddleware];\n\n    // redux 개발 도구와 연동하기 위한 enhancer. 배포용일 경우에는 개발 도구와 연동하지 않도록 한다.\n    const enhancer = process.env.NODE_ENV === \"production\" ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n\n    const store = createStore(reducer, enhancer);\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n\n    return store;\n};\n\n// debug가 true이면 개발 모드\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === \"development\" });\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}