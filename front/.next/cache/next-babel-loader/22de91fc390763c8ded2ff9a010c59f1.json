{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\"; // 서버에 데이터를 요청하는 함수. 얘는 제네레이터 아님!\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n} // LOG_IN_REQUEST 액션 함수(리듀서 안의 loginRequestAction)에 담긴 데이터가 자동으로 logIn 함수의 매개변수로 전달 됨.\n\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          // call: 비동기 함수를 실행하는 이펙트. 여기서는 logInAPI가 데이터를 받아올 때까지 기다림\n          // call의 두 번째 인자인 action.data가 logInAPI의 인자로 들어간다.\n          // const result = yield call(logInAPI, action.data);\n          console.log(\"saga login request\");\n          delay(2000); // put: dispatch와 비슷한 기능\n\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n} // 로그아웃도 비슷한 패턴으로 제작하여 사용\n\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          // const result = yield call(logOutAPI);\n          console.log(\"saga logout request\");\n          delay(2000);\n          _context2.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS // data: result.data\n\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction signUpAPI() {\n  return axios.post(\"/api/signup\");\n}\n\nfunction signUp() {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          // const result = yield call(signUpAPI);\n          console.log(\"saga signup request\");\n          delay(2000);\n          _context3.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS // data: result.data\n\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n} // eventlistener와 같은 역할을 하는 함수. 로그인 요청 액션을 감지한다.\n\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/sagas/user.js"],"names":["logIn","logOut","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga","all","fork","call","put","takeLatest","delay","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logInAPI","data","post","action","console","log","type","error","response","logOutAPI","signUpAPI"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\n\n// 서버에 데이터를 요청하는 함수. 얘는 제네레이터 아님!\nfunction logInAPI(data) {\n    return axios.post(\"/api/login\", data);\n}\n\n// LOG_IN_REQUEST 액션 함수(리듀서 안의 loginRequestAction)에 담긴 데이터가 자동으로 logIn 함수의 매개변수로 전달 됨.\nfunction* logIn(action) {\n    // 요청이 성공했을 경우 try 실행, 실패했을 경우 catch 실행\n    try {\n        // call: 비동기 함수를 실행하는 이펙트. 여기서는 logInAPI가 데이터를 받아올 때까지 기다림\n        // call의 두 번째 인자인 action.data가 logInAPI의 인자로 들어간다.\n        // const result = yield call(logInAPI, action.data);\n        console.log(\"saga login request\");\n        delay(2000);\n\n        // put: dispatch와 비슷한 기능\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({ type: LOG_IN_FAILURE, error: err.response.data });\n    }\n}\n\n// 로그아웃도 비슷한 패턴으로 제작하여 사용\nfunction logOutAPI() {\n    return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n    try {\n        // const result = yield call(logOutAPI);\n        console.log(\"saga logout request\");\n        delay(2000);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n            // data: result.data\n        });\n    } catch (err) {\n        yield put({ type: LOG_OUT_FAILURE, error: err.response.data });\n    }\n}\n\nfunction signUpAPI() {\n    return axios.post(\"/api/signup\");\n}\n\nfunction* signUp() {\n    try {\n        // const result = yield call(signUpAPI);\n        console.log(\"saga signup request\");\n        delay(2000);\n        yield put({\n            type: SIGN_UP_SUCCESS,\n            // data: result.data\n        });\n    } catch (err) {\n        yield put({ type: SIGN_UP_FAILURE, error: err.response.data });\n    }\n}\n\n// eventlistener와 같은 역할을 하는 함수. 로그인 요청 액션을 감지한다.\nfunction* watchLogIn() {\n    // take: 해당 액션이 실행될 때 까지 기다렸다가, 두 번째 인자의 함수를 실행한다. (take는 1회용, takeEvery는 계속 사용)\n    // takeLatest: 마우스로 광클해서 요청을 무지하게 보내도 마지막 요청에만 응답하게끔 해줌. (하지만 무수한 요청은 막을 수 없음)\n    // throttle: 마우스로 광클해도 일정 시간동안 한번의 요청만 보낼 수 있게 해줌.\n    yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n    yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]); // fork: 비동기가 아닌 동기 함수를 실행하는 이펙트\n}\n"]},"metadata":{},"sourceType":"module"}