{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\"; // 서버에 데이터를 요청하는 함수. 얘는 제네레이터 아님!\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n  // 요청이 성공했을 경우 try 실행, 실패했을 경우 catch 실행\n  try {\n    // call: 비동기 함수를 실행하는 이펙트. 여기서는 logInAPI가 데이터를 받아올 때까지 기다림\n    // call의 두 번째 인자인 action.data가 logInAPI의 인자로 들어간다.\n    // const result = yield call(logInAPI, action.data);\n    console.log(\"saga login request\");\n    delay(5000); // put: dispatch와 비슷한 기능\n\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n} // 로그아웃도 비슷한 패턴으로 제작하여 사용\n\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    console.log(\"saga logout request\");\n    delay(5000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\" // data: result.data\n\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n} // eventlistener와 같은 역할을 하는 함수. 로그인 요청 액션을 감지한다.\n\n\nfunction* watchLogIn() {\n  // take: 해당 액션이 실행될 때 까지 기다렸다가, 두 번째 인자의 함수를 실행한다. (take는 1회용, takeEvery는 계속 사용)\n  // takeLatest: 마우스로 광클해서 요청을 무지하게 보내도 마지막 요청에만 응답하게끔 해줌. (하지만 무수한 요청은 막을 수 없음)\n  // throttle: 마우스로 광클해도 일정 시간동안 한번의 요청만 보낼 수 있게 해줌.\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]); // fork: 비동기가 아닌 동기 함수를 실행하는 이펙트\n}","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/sagas/user.js"],"names":["all","fork","call","put","takeLatest","delay","axios","logInAPI","data","post","logIn","action","console","log","type","err","response","logOutAPI","logOut","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,KAA3C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACpB;AACA,MAAI;AACA;AACA;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAR,IAAAA,KAAK,CAAC,IAAD,CAAL,CALA,CAOA;;AACA,UAAMF,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAE,gBADA;AAENN,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GAZD,CAYE,OAAOO,GAAP,EAAY;AACV,UAAMZ,GAAG,CAAC;AAAEW,MAAAA,IAAI,EAAE,gBAAR;AAA0BN,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAA7C,KAAD,CAAT;AACH;AACJ,C,CAED;;;AACA,SAASS,SAAT,GAAqB;AACjB,SAAOX,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUS,MAAV,GAAmB;AACf,MAAI;AACA;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAR,IAAAA,KAAK,CAAC,IAAD,CAAL;AACA,UAAMF,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAE,iBADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GARD,CAQE,OAAOC,GAAP,EAAY;AACV,UAAMZ,GAAG,CAAC;AAAEW,MAAAA,IAAI,EAAE,iBAAR;AAA2BN,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAA9C,KAAD,CAAT;AACH;AACJ,C,CAED;;;AACA,UAAUW,UAAV,GAAuB;AACnB;AACA;AACA;AACA,QAAMf,UAAU,CAAC,gBAAD,EAAmBM,KAAnB,CAAhB;AACH;;AAED,UAAUU,WAAV,GAAwB;AACpB,QAAMhB,UAAU,CAAC,iBAAD,EAAoBc,MAApB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMrB,GAAG,CAAC,CAACC,IAAI,CAACkB,UAAD,CAAL,EAAmBlB,IAAI,CAACmB,WAAD,CAAvB,CAAD,CAAT,CADgC,CACkB;AACrD","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n// 서버에 데이터를 요청하는 함수. 얘는 제네레이터 아님!\nfunction logInAPI(data) {\n    return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n    // 요청이 성공했을 경우 try 실행, 실패했을 경우 catch 실행\n    try {\n        // call: 비동기 함수를 실행하는 이펙트. 여기서는 logInAPI가 데이터를 받아올 때까지 기다림\n        // call의 두 번째 인자인 action.data가 logInAPI의 인자로 들어간다.\n        // const result = yield call(logInAPI, action.data);\n        console.log(\"saga login request\");\n        delay(5000);\n\n        // put: dispatch와 비슷한 기능\n        yield put({\n            type: \"LOG_IN_SUCCESS\",\n            data: action.data\n        });\n    } catch (err) {\n        yield put({ type: \"LOG_IN_FAILURE\", data: err.response.data });\n    }\n}\n\n// 로그아웃도 비슷한 패턴으로 제작하여 사용\nfunction logOutAPI() {\n    return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n    try {\n        // const result = yield call(logOutAPI);\n        console.log(\"saga logout request\");\n        delay(5000);\n        yield put({\n            type: \"LOG_OUT_SUCCESS\"\n            // data: result.data\n        });\n    } catch (err) {\n        yield put({ type: \"LOG_OUT_FAILURE\", data: err.response.data });\n    }\n}\n\n// eventlistener와 같은 역할을 하는 함수. 로그인 요청 액션을 감지한다.\nfunction* watchLogIn() {\n    // take: 해당 액션이 실행될 때 까지 기다렸다가, 두 번째 인자의 함수를 실행한다. (take는 1회용, takeEvery는 계속 사용)\n    // takeLatest: 마우스로 광클해서 요청을 무지하게 보내도 마지막 요청에만 응답하게끔 해줌. (하지만 무수한 요청은 막을 수 없음)\n    // throttle: 마우스로 광클해도 일정 시간동안 한번의 요청만 보낼 수 있게 해줌.\n    yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n    yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nexport default function* userSaga() {\n    yield all([fork(watchLogIn), fork(watchLogOut)]); // fork: 비동기가 아닌 동기 함수를 실행하는 이펙트\n}\n"]},"metadata":{},"sourceType":"module"}