{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/dong/Documents/react-sns/front/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport AppLayout from \"../components/AppLayout\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\n\nvar Home = function Home() {\n  _s();\n\n  var _useRef;\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me,\n      loginDone = _useSelector.loginDone;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePost = _useSelector2.hasMorePost,\n      loadPostsLoading = _useSelector2.loadPostsLoading;\n\n  var myStyles = useRef((_useRef = {\n    background: \"rgb(194,219,219)\"\n  }, _defineProperty(_useRef, \"background\", \"linear-gradient(180deg, rgba(194,219,219,1) 0%, rgba(220,229,221,1) 100%)\"), _defineProperty(_useRef, \"backgroundSize\", \"100% 800px\"), _useRef));\n  var dispatch = useDispatch(); // 유저의 로그인된 정보를 불러오는 액션을 디스패치한다.\n  // 메인 화면을 마운트할 때 포스트를 불러오는 액션을 디스패치한다.\n\n  useEffect(function () {\n    dispatch({\n      type: LOAD_MY_INFO_REQUEST\n    });\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []); // 스크롤을 끝까지 내리면 게시물을 더 불러오는 액션을 디스패치한다.\n\n  useEffect(function () {\n    function onScroll() {\n      // 현재 스크롤 위치(화면 상단 기준), 브라우저 화면의 높이, 총 높이\n      console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight); // 현재 스크롤 위치와 브라우저의 높이를 더했을 때 총 높이가 된다면? 스크롤이 맨 아래에 있다는 뜻. 300픽셀 정도 남겼을 때 로딩하기!\n\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 500) {\n        // 불러올 게시물이 있고, 로딩중이 아닐 경우 요청 디스패치!\n        if (hasMorePost && !loadPostsLoading) {\n          dispatch({\n            type: LOAD_POSTS_REQUEST\n          });\n        }\n      }\n    }\n\n    window.addEventListener(\"scroll\", onScroll); // unmount\n\n    return function () {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePost, loadPostsLoading]);\n  return __jsx(React.Fragment, null, __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    style: myStyles.current,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, loginDone && __jsx(PostForm, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 35\n    }\n  }), mainPosts.map(function (post) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }\n    });\n  }))));\n};\n\n_s(Home, \"iRTo4LVkhLRmjGhZkcdHdHPfGj8=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/pages/index.js"],"names":["React","useEffect","useRef","useSelector","useDispatch","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","Home","state","user","me","loginDone","post","mainPosts","hasMorePost","loadPostsLoading","myStyles","background","dispatch","type","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","addEventListener","removeEventListener","current","map","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport AppLayout from \"../components/AppLayout\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\n\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\n\nconst Home = () => {\n    const { me, loginDone } = useSelector((state) => state.user);\n    const { mainPosts, hasMorePost, loadPostsLoading } = useSelector((state) => state.post);\n\n    const myStyles = useRef({\n        background: \"rgb(194,219,219)\",\n        background: \"linear-gradient(180deg, rgba(194,219,219,1) 0%, rgba(220,229,221,1) 100%)\",\n        backgroundSize: \"100% 800px\",\n    });\n\n    const dispatch = useDispatch();\n\n    // 유저의 로그인된 정보를 불러오는 액션을 디스패치한다.\n    // 메인 화면을 마운트할 때 포스트를 불러오는 액션을 디스패치한다.\n    useEffect(() => {\n        dispatch({\n            type: LOAD_MY_INFO_REQUEST,\n        });\n        dispatch({\n            type: LOAD_POSTS_REQUEST,\n        });\n    }, []);\n\n    // 스크롤을 끝까지 내리면 게시물을 더 불러오는 액션을 디스패치한다.\n    useEffect(() => {\n        function onScroll() {\n            // 현재 스크롤 위치(화면 상단 기준), 브라우저 화면의 높이, 총 높이\n            console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n\n            // 현재 스크롤 위치와 브라우저의 높이를 더했을 때 총 높이가 된다면? 스크롤이 맨 아래에 있다는 뜻. 300픽셀 정도 남겼을 때 로딩하기!\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 500) {\n                // 불러올 게시물이 있고, 로딩중이 아닐 경우 요청 디스패치!\n                if (hasMorePost && !loadPostsLoading) {\n                    dispatch({\n                        type: LOAD_POSTS_REQUEST,\n                    });\n                }\n            }\n        }\n        window.addEventListener(\"scroll\", onScroll);\n\n        // unmount\n        return () => {\n            window.removeEventListener(\"scroll\", onScroll);\n        };\n    }, [hasMorePost, loadPostsLoading]);\n\n    return (\n        <>\n            <AppLayout>\n                <div style={myStyles.current}>\n                    {/* PostForm 컴포넌트는 로그인 한 상태일 때만 보임 */}\n                    {loginDone && <PostForm />}\n                    {mainPosts.map((post) => (\n                        <PostCard key={post.id} post={post} />\n                    ))}\n                </div>\n            </AppLayout>\n        </>\n    );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}