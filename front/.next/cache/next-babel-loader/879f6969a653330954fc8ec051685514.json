{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, put, takeLatest, delay, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\"; // 게시물 불러오기\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data);\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadPostsAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data // 불러올 게시물\n\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n} // 게시글 추가\n\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  }); // req.body.content\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          console.log(\"saga add post success\");\n          _context2.next = 15;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 11]]);\n} // 게시글 삭제\n\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/post\", data);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data // 지울 게시글의 아이디가 들어있음\n\n          });\n\n        case 5:\n          _context3.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          console.log(\"saga remove post success\");\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n} // 댓글 추가\n\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          console.log(\"saga add comment success\");\n          _context4.next = 14;\n          break;\n\n        case 9:\n          _context4.prev = 9;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 14;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 9]]);\n} // 게시물 좋아요\n\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"/like\")); // 일부를 수정하는 것이니까 patch\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data // 불러올 게시물\n\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n} // 게시물 좋아요 취소\n\n\nfunction unlikePostAPI(data) {\n  return axios.patch(\"/delete/\".concat(data, \"/like\"));\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data // 불러올 게시물\n\n          });\n\n        case 6:\n          _context6.next = 12;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          _context6.next = 12;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context6.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment), fork(watchLikePost), fork(watchUnlikePost)]);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/sagas/post.js"],"names":["loadPosts","addPost","removePost","addComment","likePost","unlikePost","watchLoadPost","watchAddPost","watchRemovePost","watchAddComment","watchLikePost","watchUnlikePost","postSaga","all","fork","call","put","takeLatest","delay","throttle","axios","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","action","result","type","error","response","addPostAPI","post","content","id","console","log","removePostAPI","addCommentAPI","postId","likePostAPI","patch","unlikePostAPI"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest, delay, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\n// 게시물 불러오기\nfunction loadPostsAPI(data) {\n    return axios.get(\"/posts\", data);\n}\nfunction* loadPosts(action) {\n    try {\n        const result = yield call(loadPostsAPI, action.data);\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data, // 불러올 게시물\n        });\n    } catch (err) {\n        yield put({ type: LOAD_POSTS_FAILURE, error: err.response.data });\n    }\n}\n\n// 게시글 추가\nfunction addPostAPI(data) {\n    return axios.post(\"/post\", { content: data }); // req.body.content\n}\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        });\n        console.log(\"saga add post success\");\n    } catch (err) {\n        yield put({ type: ADD_POST_FAILURE, error: err.response.data });\n    }\n}\n\n// 게시글 삭제\nfunction removePostAPI(data) {\n    return axios.delete(\"/post\", data);\n}\nfunction* removePost(action) {\n    try {\n        // const result = yield call(addPostAPI, action.data);\n        yield delay(2000);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data, // 지울 게시글의 아이디가 들어있음\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data,\n        });\n        console.log(\"saga remove post success\");\n    } catch (err) {\n        yield put({ type: REMOVE_POST_FAILURE, error: err.response.data });\n    }\n}\n\n// 댓글 추가\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data,\n        });\n        console.log(\"saga add comment success\");\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\n// 게시물 좋아요\nfunction likePostAPI(data) {\n    return axios.patch(`/post/${data}/like`); // 일부를 수정하는 것이니까 patch\n}\nfunction* likePost(action) {\n    try {\n        const result = yield call(likePostAPI, action.data); // action.data는 페이지에서 받아 온 post.id이다.\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data, // 불러올 게시물\n        });\n    } catch (err) {\n        yield put({ type: LIKE_POST_FAILURE, error: err.response.data });\n    }\n}\n\n// 게시물 좋아요 취소\nfunction unlikePostAPI(data) {\n    return axios.patch(`/delete/${data}/like`);\n}\nfunction* unlikePost(action) {\n    try {\n        const result = yield call(unlikePostAPI, action.data);\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data, // 불러올 게시물\n        });\n    } catch (err) {\n        yield put({ type: UNLIKE_POST_FAILURE, error: err.response.data });\n    }\n}\n\nfunction* watchLoadPost() {\n    // 5초에 한 번만 실행\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nexport default function* postSaga() {\n    yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment), fork(watchLikePost), fork(watchUnlikePost)]);\n}\n"]},"metadata":{},"sourceType":"module"}