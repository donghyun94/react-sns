{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/dong/Documents/react-sns/front/components/PostForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useRef, useCallback, useState, useEffect } from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addPostAction } from \"../reducers/post\";\n\nvar PostForm = function PostForm() {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      postAdded = _useSelector.postAdded;\n\n  var _useState = useState(\"\"),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var dispatch = useDispatch();\n  var imageInput = useRef();\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  useEffect(function () {\n    if (postAdded) {\n      setText(\"\");\n    }\n  }, [postAdded]);\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []);\n  var onSubmit = useCallback(function () {\n    dispatch(addPostAction);\n  }, []);\n  return __jsx(Form, {\n    style: {\n      margin: \"10px 0 20px\"\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, __jsx(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }), __jsx(Button, {\n    onClick: onClickImageUpload,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      \"float\": \"right\"\n    },\n    htmlType: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, imagePaths.map(function (v) {\n    return __jsx(\"div\", {\n      key: v,\n      style: {\n        display: \"inline-block\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }\n    }, __jsx(\"img\", {\n      src: \"http://localhost:3065/\" + v,\n      style: {\n        width: \"200px\"\n      },\n      alt: v,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 29\n      }\n    }), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 29\n      }\n    }, __jsx(Button, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 33\n      }\n    }, \"\\uC81C\\uAC70\")));\n  })));\n};\n\n_s(PostForm, \"dZKOc7IxQ1QA0JqaBdPt6cqon7E=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/components/PostForm.js"],"names":["React","useRef","useCallback","useState","useEffect","Form","Input","Button","useDispatch","useSelector","addPostAction","PostForm","state","post","imagePaths","postAdded","text","setText","dispatch","imageInput","onClickImageUpload","current","click","onChangeText","e","target","value","onSubmit","margin","map","v","display","width"],"mappings":"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","sourcesContent":["import React, { useRef, useCallback, useState, useEffect } from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { addPostAction } from \"../reducers/post\";\n\nconst PostForm = () => {\n    const { imagePaths, postAdded } = useSelector((state) => state.post);\n    const [text, setText] = useState(\"\");\n    const dispatch = useDispatch();\n    const imageInput = useRef();\n\n    const onClickImageUpload = useCallback(() => {\n        imageInput.current.click();\n    }, [imageInput.current]);\n\n    useEffect(() => {\n        if (postAdded) {\n            setText(\"\");\n        }\n    }, [postAdded]);\n\n    const onChangeText = useCallback((e) => {\n        setText(e.target.value);\n    }, []);\n\n    const onSubmit = useCallback(() => {\n        dispatch(addPostAction);\n    }, []);\n\n    return (\n        <Form style={{ margin: \"10px 0 20px\" }} encType=\"multipart/form-data\" onFinish={onSubmit}>\n            <Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\" />\n            <div>\n                <input type=\"file\" multiple hidden ref={imageInput} />\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n                <Button type=\"primary\" style={{ float: \"right\" }} htmlType=\"submit\">\n                    짹짹\n                </Button>\n            </div>\n            <div>\n                {imagePaths.map((v) => {\n                    return (\n                        <div key={v} style={{ display: \"inline-block\" }}>\n                            <img src={\"http://localhost:3065/\" + v} style={{ width: \"200px\" }} alt={v} />\n                            <div>\n                                <Button>제거</Button>\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n        </Form>\n    );\n};\n\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}