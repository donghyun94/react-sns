{"ast":null,"code":"// redux 세팅\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from \"../reducers\";\nimport rootSaga from \"../sagas\"; // state와 reducer를 포함하는 것이 바로 store이다.\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware]; // redux 개발 도구와 연동하기 위한 enhancer. 배포용일 경우에는 개발 도구와 연동하지 않도록 한다.\n\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}; // debug가 true이면 개발 모드\n\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/store/configureStore.js"],"names":["createWrapper","createStore","applyMiddleware","compose","createSagaMiddleware","composeWithDevTools","reducer","rootSaga","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;;AACA,MAAMC,cAAc,GAAG,MAAM;AACzB,QAAMC,cAAc,GAAGL,oBAAoB,EAA3C;AACA,QAAMM,WAAW,GAAG,CAACD,cAAD,CAApB,CAFyB,CAIzB;;AACA,QAAME,QAAQ,GAAG,QAAwCR,OAAO,CAACD,eAAe,CAAC,GAAGQ,WAAJ,CAAhB,CAA/C,GAAmFL,mBAAmB,CAACH,eAAe,CAAC,GAAGQ,WAAJ,CAAhB,CAAvH;AAEA,QAAME,KAAK,GAAGX,WAAW,CAACK,OAAD,EAAUK,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBP,QAAnB,CAAjB;AAEA,SAAOK,KAAP;AACH,CAXD,C,CAaA;;;AACA,MAAMG,OAAO,GAAGf,aAAa,CAACQ,cAAD,EAAiB;AAAEQ,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["// redux 세팅\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport reducer from \"../reducers\";\nimport rootSaga from \"../sagas\";\n\n// state와 reducer를 포함하는 것이 바로 store이다.\nconst configureStore = () => {\n    const sagaMiddleware = createSagaMiddleware();\n    const middlewares = [sagaMiddleware];\n\n    // redux 개발 도구와 연동하기 위한 enhancer. 배포용일 경우에는 개발 도구와 연동하지 않도록 한다.\n    const enhancer = process.env.NODE_ENV === \"production\" ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n\n    const store = createStore(reducer, enhancer);\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n\n    return store;\n};\n\n// debug가 true이면 개발 모드\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === \"development\" });\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}