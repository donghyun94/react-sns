{"ast":null,"code":"import produce from \"immer\"; // 불변성 유지에 참 좋은 immer\n// user 기본 state 구조\n\nconst initialState = {\n  mainPosts: [],\n  // 이미지 업로드할 때의 경로\n  imagePaths: [],\n  // 더 불러올 게시물이 있는지 여부\n  hasMorePost: true,\n  // 게시글 로딩이 완료되었는지 여부\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  // 게시글 추가가 완료되었는지 여부\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  // 게시글 삭제가 완료되었는지 여부\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  // 댓글 추가가 완료되었는지 여부\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  // 좋아요 되었는지 여부\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  // 좋아요 취소 되었는지 여부\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null\n}; // 액션 오타 방지용\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport const addPostAction = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data\n  };\n}; // immer를 이용하면 불변성이고 나발이고 쉽게 상태를 바꿀 수 있다!\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      // 포스트 로드 액션\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts); // 포스트 목록을 불러와서 추가함\n\n        draft.hasMorePost = draft.mainPosts.length < 50; // 불러온 게시글이 50개 이상이면 더 이상 안불러올거임\n\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      // 포스트 추가 액션\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data); // immer를 이용해 배열의 맨 앞에 바로 추가\n\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      // 포스트 삭제 액션\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data); // 지울 때는 필터를 이용\n\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      // 코멘트 액션\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId); // 해당 아이디의 게시물 찾기\n\n          post.Comments.unshift(action.data); // 추가하고 끝~\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      // 좋아요 액션\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers.push({\n            id: action.data.UserId\n          }); // 좋아요 누른 사람 목록에 나를 추가한다.\n\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n      // 좋아요 취소 액션\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.UserId); // 좋아요 누른 사람 목록에서 나를 제거한다.\n\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  }); // switch (action.type) {\n  //     // 포스트 추가 액션\n  //     case ADD_POST_REQUEST:\n  //         console.log(\"reducer add post request\");\n  //         return {\n  //             ...state,\n  //             addPostLoading: true,\n  //             addPostDone: false,\n  //             addPostError: null,\n  //         };\n  //     case ADD_POST_SUCCESS:\n  //         console.log(\"reducer add post success\");\n  //         return {\n  //             ...state,\n  //             mainPosts: [dummyPost(action.data), ...state.mainPosts],\n  //             addPostLoading: false,\n  //             addPostDone: true,\n  //         };\n  //     case ADD_POST_FAILURE:\n  //         console.log(\"reducer add post failure\");\n  //         return {\n  //             ...state,\n  //             addPostLoading: false,\n  //             addPostError: action.error,\n  //         };\n  //     // 포스트 삭제 액션\n  //     case REMOVE_POST_REQUEST:\n  //         console.log(\"reducer remove post request\");\n  //         return {\n  //             ...state,\n  //             removePostLoading: true,\n  //             removePostDone: false,\n  //             removePostError: null,\n  //         };\n  //     case REMOVE_POST_SUCCESS:\n  //         console.log(\"reducer remove post success\");\n  //         return {\n  //             ...state,\n  //             mainPosts: state.mainPosts.filter((v) => v.id !== action.data), // 지울 때는 필터를 이용\n  //             removePostLoading: false,\n  //             removePostDone: true,\n  //         };\n  //     case REMOVE_POST_FAILURE:\n  //         console.log(\"reducer remove post failure\");\n  //         return {\n  //             ...state,\n  //             removePostLoading: false,\n  //             removePostError: action.error,\n  //         };\n  //     // 코멘트 액션\n  //     case ADD_COMMENT_REQUEST:\n  //         console.log(\"reducer add comment request\");\n  //         return {\n  //             ...state,\n  //             addCommentLoading: true,\n  //             addCommentDone: false,\n  //             addCommentError: null,\n  //         };\n  //     case ADD_COMMENT_SUCCESS: {\n  //         const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n  //         const post = { ...state.mainPosts[postIndex] };\n  //         post.Comments = [dummyComment(action.data.content), ...post.Comments];\n  //         const mainPosts = [...state.mainPosts];\n  //         mainPosts[postIndex] = post;\n  //         return {\n  //             ...state,\n  //             mainPosts,\n  //             addCommentLoading: false,\n  //             addCommentDone: true,\n  //         };\n  //     }\n  //     case ADD_COMMENT_FAILURE:\n  //         console.log(\"reducer add comment failure\");\n  //         return {\n  //             ...state,\n  //             addCommentLoading: false,\n  //             addCommentError: action.error,\n  //         };\n  //     default:\n  //         return state;\n  // }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","addPostAction","data","type","reducer","state","action","draft","concat","length","error","unshift","filter","v","id","post","find","PostId","Comments","Likers","push","UserId"],"mappings":"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,GAAcJ,IAAI,CAACI,MAAL,CAAYP,MAAZ,CAAoBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASR,MAAM,CAACJ,IAAP,CAAYmB,MAA/C,CAAd,CAFsB,CAEgD;;AACtEd,UAAAA,KAAK,CAAC3B,iBAAN,GAA0B,KAA1B;AACA2B,UAAAA,KAAK,CAAC1B,cAAN,GAAuB,IAAvB;AACA;AACH;;AACD,WAAKmB,mBAAL;AACIO,QAAAA,KAAK,CAAC3B,iBAAN,GAA0B,KAA1B;AACA2B,QAAAA,KAAK,CAACzB,eAAN,GAAwBwB,MAAM,CAACI,KAA/B;AACA;;AAEJ;AACI;AAzGR;AA2GH,GA5Ga,CAAd,CAD8C,CA+G9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACH,CAnMD;;AAqMA,eAAeN,OAAf","sourcesContent":["import produce from \"immer\"; // 불변성 유지에 참 좋은 immer\n\n// user 기본 state 구조\nconst initialState = {\n    mainPosts: [],\n\n    // 이미지 업로드할 때의 경로\n    imagePaths: [],\n\n    // 더 불러올 게시물이 있는지 여부\n    hasMorePost: true,\n\n    // 게시글 로딩이 완료되었는지 여부\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n\n    // 게시글 추가가 완료되었는지 여부\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n\n    // 게시글 삭제가 완료되었는지 여부\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n\n    // 댓글 추가가 완료되었는지 여부\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n\n    // 좋아요 되었는지 여부\n    likePostLoading: false,\n    likePostDone: false,\n    likePostError: null,\n\n    // 좋아요 취소 되었는지 여부\n    unlikePostLoading: false,\n    unlikePostDone: false,\n    unlikePostError: null,\n};\n\n// 액션 오타 방지용\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\n\nexport const addPostAction = (data) => {\n    return {\n        type: ADD_POST_REQUEST,\n        data,\n    };\n};\n\n// immer를 이용하면 불변성이고 나발이고 쉽게 상태를 바꿀 수 있다!\nconst reducer = (state = initialState, action) => {\n    return produce(state, (draft) => {\n        switch (action.type) {\n            // 포스트 로드 액션\n            case LOAD_POSTS_REQUEST:\n                draft.loadPostsLoading = true;\n                draft.loadPostsDone = false;\n                draft.loadPostsError = null;\n                break;\n            case LOAD_POSTS_SUCCESS:\n                draft.loadPostsLoading = false;\n                draft.loadPostsDone = true;\n                draft.mainPosts = action.data.concat(draft.mainPosts); // 포스트 목록을 불러와서 추가함\n                draft.hasMorePost = draft.mainPosts.length < 50; // 불러온 게시글이 50개 이상이면 더 이상 안불러올거임\n                break;\n            case LOAD_POSTS_FAILURE:\n                draft.loadPostsLoading = false;\n                draft.loadPostsError = action.error;\n                break;\n\n            // 포스트 추가 액션\n            case ADD_POST_REQUEST:\n                draft.addPostLoading = true;\n                draft.addPostDone = false;\n                draft.addPostError = null;\n                break;\n            case ADD_POST_SUCCESS:\n                draft.mainPosts.unshift(action.data); // immer를 이용해 배열의 맨 앞에 바로 추가\n                draft.addPostLoading = false;\n                draft.addPostDone = true;\n                break;\n            case ADD_POST_FAILURE:\n                draft.addPostLoading = false;\n                draft.addPostError = action.error;\n                break;\n\n            // 포스트 삭제 액션\n            case REMOVE_POST_REQUEST:\n                draft.removePostLoading = true;\n                draft.removePostDone = false;\n                draft.removePostError = null;\n                break;\n            case REMOVE_POST_SUCCESS:\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data); // 지울 때는 필터를 이용\n                draft.removePostLoading = false;\n                draft.removePostDone = true;\n                break;\n            case REMOVE_POST_FAILURE:\n                draft.removePostLoading = false;\n                draft.removePostError = action.error;\n                break;\n\n            // 코멘트 액션\n            case ADD_COMMENT_REQUEST:\n                draft.addCommentLoading = true;\n                draft.addCommentDone = false;\n                draft.addCommentError = null;\n                break;\n            case ADD_COMMENT_SUCCESS: {\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId); // 해당 아이디의 게시물 찾기\n                post.Comments.unshift(action.data); // 추가하고 끝~\n                draft.addCommentLoading = false;\n                draft.addCommentDone = true;\n                break;\n            }\n            case ADD_COMMENT_FAILURE:\n                draft.addCommentLoading = false;\n                draft.addCommentError = action.error;\n                break;\n\n            // 좋아요 액션\n            case LIKE_POST_REQUEST:\n                draft.likePostLoading = true;\n                draft.likePostDone = false;\n                draft.likePostError = null;\n                break;\n            case LIKE_POST_SUCCESS: {\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n                post.Likers.push({ id: action.data.UserId }); // 좋아요 누른 사람 목록에 나를 추가한다.\n                draft.likePostLoading = false;\n                draft.likePostDone = true;\n                break;\n            }\n            case LIKE_POST_FAILURE:\n                draft.likePostLoading = false;\n                draft.likePostError = action.error;\n                break;\n\n            // 좋아요 취소 액션\n            case UNLIKE_POST_REQUEST:\n                draft.unlikePostLoading = true;\n                draft.unlikePostDone = false;\n                draft.unlikePostError = null;\n                break;\n            case UNLIKE_POST_SUCCESS: {\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n                post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId); // 좋아요 누른 사람 목록에서 나를 제거한다.\n                draft.unlikePostLoading = false;\n                draft.unlikePostDone = true;\n                break;\n            }\n            case UNLIKE_POST_FAILURE:\n                draft.unlikePostLoading = false;\n                draft.unlikePostError = action.error;\n                break;\n\n            default:\n                break;\n        }\n    });\n\n    // switch (action.type) {\n    //     // 포스트 추가 액션\n    //     case ADD_POST_REQUEST:\n    //         console.log(\"reducer add post request\");\n    //         return {\n    //             ...state,\n    //             addPostLoading: true,\n    //             addPostDone: false,\n    //             addPostError: null,\n    //         };\n    //     case ADD_POST_SUCCESS:\n    //         console.log(\"reducer add post success\");\n    //         return {\n    //             ...state,\n    //             mainPosts: [dummyPost(action.data), ...state.mainPosts],\n    //             addPostLoading: false,\n    //             addPostDone: true,\n    //         };\n    //     case ADD_POST_FAILURE:\n    //         console.log(\"reducer add post failure\");\n    //         return {\n    //             ...state,\n    //             addPostLoading: false,\n    //             addPostError: action.error,\n    //         };\n\n    //     // 포스트 삭제 액션\n    //     case REMOVE_POST_REQUEST:\n    //         console.log(\"reducer remove post request\");\n    //         return {\n    //             ...state,\n    //             removePostLoading: true,\n    //             removePostDone: false,\n    //             removePostError: null,\n    //         };\n    //     case REMOVE_POST_SUCCESS:\n    //         console.log(\"reducer remove post success\");\n    //         return {\n    //             ...state,\n    //             mainPosts: state.mainPosts.filter((v) => v.id !== action.data), // 지울 때는 필터를 이용\n    //             removePostLoading: false,\n    //             removePostDone: true,\n    //         };\n    //     case REMOVE_POST_FAILURE:\n    //         console.log(\"reducer remove post failure\");\n    //         return {\n    //             ...state,\n    //             removePostLoading: false,\n    //             removePostError: action.error,\n    //         };\n\n    //     // 코멘트 액션\n    //     case ADD_COMMENT_REQUEST:\n    //         console.log(\"reducer add comment request\");\n    //         return {\n    //             ...state,\n    //             addCommentLoading: true,\n    //             addCommentDone: false,\n    //             addCommentError: null,\n    //         };\n    //     case ADD_COMMENT_SUCCESS: {\n    //         const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n    //         const post = { ...state.mainPosts[postIndex] };\n    //         post.Comments = [dummyComment(action.data.content), ...post.Comments];\n    //         const mainPosts = [...state.mainPosts];\n    //         mainPosts[postIndex] = post;\n    //         return {\n    //             ...state,\n    //             mainPosts,\n    //             addCommentLoading: false,\n    //             addCommentDone: true,\n    //         };\n    //     }\n    //     case ADD_COMMENT_FAILURE:\n    //         console.log(\"reducer add comment failure\");\n    //         return {\n    //             ...state,\n    //             addCommentLoading: false,\n    //             addCommentError: action.error,\n    //         };\n\n    //     default:\n    //         return state;\n    // }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}