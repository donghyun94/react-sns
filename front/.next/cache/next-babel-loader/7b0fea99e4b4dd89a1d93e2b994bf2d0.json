{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/dong/Documents/react-sns/front/components/FollowButton.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback } from \"react\";\nimport { Button } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FOLLOW_REQUEST, UNFOLLOW_REQUEST } from \"../reducers/user\";\n\nvar FollowButton = function FollowButton(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me,\n      followLoading = _useSelector.followLoading,\n      unfollowLoading = _useSelector.unfollowLoading;\n\n  var isFollowing = me === null || me === void 0 ? void 0 : me.Followings.find(function (v) {\n    return v.id === post.User.id;\n  }); // 내가 팔로우 중인 아이디들 중에 포스트 작성자의 아이디가 있으면 true\n\n  var onClickButton = useCallback(function () {\n    if (isFollowing) {\n      // 팔로잉 상태에서 버튼을 누르면 언팔\n      dispatch({\n        type: UNFOLLOW_REQUEST,\n        data: post.User.id\n      });\n    } else {\n      // 아니면 팔로우\n      dispatch({\n        type: FOLLOW_REQUEST,\n        data: post.User.id\n      });\n    }\n  }, [isFollowing]);\n\n  if (post.User.id === me.id) {\n    return null;\n  }\n\n  return __jsx(Button, {\n    loading: followLoading || unfollowLoading,\n    onClick: onClickButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, isFollowing ? \"언팔로우\" : \"팔로우\");\n};\n\n_s(FollowButton, \"oQRGZ4+MgpAjZ6p1zzrPk3lOofY=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = FollowButton;\nFollowButton.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default FollowButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"FollowButton\");","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/components/FollowButton.js"],"names":["React","useCallback","Button","PropTypes","useSelector","useDispatch","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FollowButton","post","dispatch","state","user","me","followLoading","unfollowLoading","isFollowing","Followings","find","v","id","User","onClickButton","type","data","propTypes","object","isRequired"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,kBAAjD;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAC/B,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;;AAD+B,qBAEgBD,WAAW,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAF3B;AAAA,MAEvBC,EAFuB,gBAEvBA,EAFuB;AAAA,MAEnBC,aAFmB,gBAEnBA,aAFmB;AAAA,MAEJC,eAFI,gBAEJA,eAFI;;AAI/B,MAAMC,WAAW,GAAGH,EAAH,aAAGA,EAAH,uBAAGA,EAAE,CAAEI,UAAJ,CAAeC,IAAf,CAAoB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,EAAF,KAASX,IAAI,CAACY,IAAL,CAAUD,EAA1B;AAAA,GAApB,CAApB,CAJ+B,CAIwC;;AAEvE,MAAME,aAAa,GAAGrB,WAAW,CAAC,YAAM;AACpC,QAAIe,WAAJ,EAAiB;AACb;AACAN,MAAAA,QAAQ,CAAC;AACLa,QAAAA,IAAI,EAAEhB,gBADD;AAELiB,QAAAA,IAAI,EAAEf,IAAI,CAACY,IAAL,CAAUD;AAFX,OAAD,CAAR;AAIH,KAND,MAMO;AACH;AACAV,MAAAA,QAAQ,CAAC;AACLa,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,IAAI,EAAEf,IAAI,CAACY,IAAL,CAAUD;AAFX,OAAD,CAAR;AAIH;AACJ,GAdgC,EAc9B,CAACJ,WAAD,CAd8B,CAAjC;;AAgBA,MAAIP,IAAI,CAACY,IAAL,CAAUD,EAAV,KAAiBP,EAAE,CAACO,EAAxB,EAA4B;AACxB,WAAO,IAAP;AACH;;AACD,SACI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEN,aAAa,IAAIC,eAAlC;AAAmD,IAAA,OAAO,EAAEO,aAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKN,WAAW,GAAG,MAAH,GAAY,KAD5B,CADJ;AAKH,CA9BD;;GAAMR,Y;UACeH,W,EAC8BD,W;;;KAF7CI,Y;AAgCNA,YAAY,CAACiB,SAAb,GAAyB;AACrBhB,EAAAA,IAAI,EAAEN,SAAS,CAACuB,MAAV,CAAiBC;AADF,CAAzB;AAIA,eAAenB,YAAf","sourcesContent":["import React, { useCallback } from \"react\";\nimport { Button } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FOLLOW_REQUEST, UNFOLLOW_REQUEST } from \"../reducers/user\";\n\nconst FollowButton = ({ post }) => {\n    const dispatch = useDispatch();\n    const { me, followLoading, unfollowLoading } = useSelector((state) => state.user);\n\n    const isFollowing = me?.Followings.find((v) => v.id === post.User.id); // 내가 팔로우 중인 아이디들 중에 포스트 작성자의 아이디가 있으면 true\n\n    const onClickButton = useCallback(() => {\n        if (isFollowing) {\n            // 팔로잉 상태에서 버튼을 누르면 언팔\n            dispatch({\n                type: UNFOLLOW_REQUEST,\n                data: post.User.id,\n            });\n        } else {\n            // 아니면 팔로우\n            dispatch({\n                type: FOLLOW_REQUEST,\n                data: post.User.id,\n            });\n        }\n    }, [isFollowing]);\n\n    if (post.User.id === me.id) {\n        return null;\n    }\n    return (\n        <Button loading={followLoading || unfollowLoading} onClick={onClickButton}>\n            {isFollowing ? \"언팔로우\" : \"팔로우\"}\n        </Button>\n    );\n};\n\nFollowButton.propTypes = {\n    post: PropTypes.object.isRequired,\n};\n\nexport default FollowButton;\n"]},"metadata":{},"sourceType":"module"}