{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\"; // 서버에 데이터를 요청하는 함수. 얘는 제네레이터 아님!\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n} // LOG_IN_REQUEST 액션 함수(리듀서 안의 loginRequestAction)에 담긴 데이터가 자동으로 logIn 함수의 매개변수로 전달 됨.\n\n\nfunction* logIn(action) {\n  // 요청이 성공했을 경우 try 실행, 실패했을 경우 catch 실행\n  try {\n    // call: 비동기 함수를 실행하는 이펙트. 여기서는 logInAPI가 데이터를 받아올 때까지 기다림\n    // call의 두 번째 인자인 action.data가 logInAPI의 인자로 들어간다.\n    // const result = yield call(logInAPI, action.data);\n    delay(2000);\n    console.log(\"saga login request\"); // put: dispatch와 비슷한 기능\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n} // 로그아웃도 비슷한 패턴으로 제작하여 사용\n\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    delay(2000);\n    console.log(\"saga logout request\");\n    yield put({\n      type: LOG_OUT_SUCCESS // data: result.data\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post(\"/api/signup\");\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield call(signUpAPI);\n    console.log(\"saga signup request\");\n    delay(2000);\n    yield put({\n      type: SIGN_UP_SUCCESS // data: result.data\n\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n} // eventlistener와 같은 역할을 하는 함수. 로그인 요청 액션을 감지한다.\n\n\nfunction* watchLogIn() {\n  // take: 해당 액션이 실행될 때 까지 기다렸다가, 두 번째 인자의 함수를 실행한다. (take는 1회용, takeEvery는 계속 사용)\n  // takeLatest: 마우스로 광클해서 요청을 무지하게 보내도 마지막 요청에만 응답하게끔 해줌. (하지만 무수한 요청은 막을 수 없음)\n  // throttle: 마우스로 광클해도 일정 시간동안 한번의 요청만 보낼 수 있게 해줌.\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]); // fork: 비동기가 아닌 동기 함수를 실행하는 이펙트\n}","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/sagas/user.js"],"names":["all","fork","call","put","takeLatest","delay","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logInAPI","data","post","logIn","action","console","log","type","err","error","response","logOutAPI","logOut","signUpAPI","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\n\n// 서버에 데이터를 요청하는 함수. 얘는 제네레이터 아님!\nfunction logInAPI(data) {\n    return axios.post(\"/api/login\", data);\n}\n\n// LOG_IN_REQUEST 액션 함수(리듀서 안의 loginRequestAction)에 담긴 데이터가 자동으로 logIn 함수의 매개변수로 전달 됨.\nfunction* logIn(action) {\n    // 요청이 성공했을 경우 try 실행, 실패했을 경우 catch 실행\n    try {\n        // call: 비동기 함수를 실행하는 이펙트. 여기서는 logInAPI가 데이터를 받아올 때까지 기다림\n        // call의 두 번째 인자인 action.data가 logInAPI의 인자로 들어간다.\n        // const result = yield call(logInAPI, action.data);\n        delay(2000);\n        console.log(\"saga login request\");\n        // put: dispatch와 비슷한 기능\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({ type: LOG_IN_FAILURE, error: err.response.data });\n    }\n}\n\n// 로그아웃도 비슷한 패턴으로 제작하여 사용\nfunction logOutAPI() {\n    return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n    try {\n        // const result = yield call(logOutAPI);\n        delay(2000);\n        console.log(\"saga logout request\");\n        yield put({\n            type: LOG_OUT_SUCCESS,\n            // data: result.data\n        });\n    } catch (err) {\n        yield put({ type: LOG_OUT_FAILURE, error: err.response.data });\n    }\n}\n\nfunction signUpAPI() {\n    return axios.post(\"/api/signup\");\n}\n\nfunction* signUp() {\n    try {\n        // const result = yield call(signUpAPI);\n        console.log(\"saga signup request\");\n        delay(2000);\n        yield put({\n            type: SIGN_UP_SUCCESS,\n            // data: result.data\n        });\n    } catch (err) {\n        yield put({ type: SIGN_UP_FAILURE, error: err.response.data });\n    }\n}\n\n// eventlistener와 같은 역할을 하는 함수. 로그인 요청 액션을 감지한다.\nfunction* watchLogIn() {\n    // take: 해당 액션이 실행될 때 까지 기다렸다가, 두 번째 인자의 함수를 실행한다. (take는 1회용, takeEvery는 계속 사용)\n    // takeLatest: 마우스로 광클해서 요청을 무지하게 보내도 마지막 요청에만 응답하게끔 해줌. (하지만 무수한 요청은 막을 수 없음)\n    // throttle: 마우스로 광클해도 일정 시간동안 한번의 요청만 보낼 수 있게 해줌.\n    yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n    yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]); // fork: 비동기가 아닌 동기 함수를 실행하는 이펙트\n}\n"]},"metadata":{},"sourceType":"module"}