{"ast":null,"code":"import shortid from \"shortid\";\nimport produce from \"immer\"; // 불변성 유지에 참 좋은 immer\n\nimport faker from \"faker\"; // user 기본 state 구조\n\nconst initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"동현이\"\n    },\n    content: \"동현이의 첫 번째 게시글! #아잉 #조아요\",\n    Images: [{\n      src: \"https://expanddesk-media.s3.amazonaws.com/hosting/740px-Google_Docs_logo.svg.png\"\n    }, {\n      src: \"https://expanddesk-media.s3.amazonaws.com/hosting/logo_google-drive.png\"\n    }],\n    Comments: [{\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: \"동현삼\"\n      },\n      content: \"꺄악\"\n    }, {\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: \"동현사\"\n      },\n      content: \"아이조아\"\n    }]\n  }],\n  // 이미지 업로드할 때의 경로\n  imagePaths: [],\n  // 게시글 추가가 완료되었는지 여부\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  // 게시글 삭제가 완료되었는지 여부\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  // 댓글 추가가 완료되었는지 여부\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"동현이\"\n  },\n  Images: [],\n  Comments: []\n});\n\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortid.generate(),\n  User: {\n    id: shortid.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortid.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(30));\n\nconst dummyComment = data => ({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"동현이\"\n  }\n}); // 액션 오타 방지용\n\n\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPostAction = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data\n  };\n}; // immer를 이용하면 불변성이고 나발이고 쉽게 상태를 바꿀 수 있다!\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      // 포스트 추가 액션\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(dummyPost(action.data)); // immer를 이용해 배열의 맨 앞에 바로 추가\n\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      // 포스트 삭제 액션\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data); // 지울 때는 필터를 이용\n\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      // 코멘트 액션\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId); // 해당 아이디의 게시물 찾기\n\n          post.Comments.unshift(dummyComment(action.data.content)); // 추가하고 끝~\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  }); // switch (action.type) {\n  //     // 포스트 추가 액션\n  //     case ADD_POST_REQUEST:\n  //         console.log(\"reducer add post request\");\n  //         return {\n  //             ...state,\n  //             addPostLoading: true,\n  //             addPostDone: false,\n  //             addPostError: null,\n  //         };\n  //     case ADD_POST_SUCCESS:\n  //         console.log(\"reducer add post success\");\n  //         return {\n  //             ...state,\n  //             mainPosts: [dummyPost(action.data), ...state.mainPosts],\n  //             addPostLoading: false,\n  //             addPostDone: true,\n  //         };\n  //     case ADD_POST_FAILURE:\n  //         console.log(\"reducer add post failure\");\n  //         return {\n  //             ...state,\n  //             addPostLoading: false,\n  //             addPostError: action.error,\n  //         };\n  //     // 포스트 삭제 액션\n  //     case REMOVE_POST_REQUEST:\n  //         console.log(\"reducer remove post request\");\n  //         return {\n  //             ...state,\n  //             removePostLoading: true,\n  //             removePostDone: false,\n  //             removePostError: null,\n  //         };\n  //     case REMOVE_POST_SUCCESS:\n  //         console.log(\"reducer remove post success\");\n  //         return {\n  //             ...state,\n  //             mainPosts: state.mainPosts.filter((v) => v.id !== action.data), // 지울 때는 필터를 이용\n  //             removePostLoading: false,\n  //             removePostDone: true,\n  //         };\n  //     case REMOVE_POST_FAILURE:\n  //         console.log(\"reducer remove post failure\");\n  //         return {\n  //             ...state,\n  //             removePostLoading: false,\n  //             removePostError: action.error,\n  //         };\n  //     // 코멘트 액션\n  //     case ADD_COMMENT_REQUEST:\n  //         console.log(\"reducer add comment request\");\n  //         return {\n  //             ...state,\n  //             addCommentLoading: true,\n  //             addCommentDone: false,\n  //             addCommentError: null,\n  //         };\n  //     case ADD_COMMENT_SUCCESS: {\n  //         const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n  //         const post = { ...state.mainPosts[postIndex] };\n  //         post.Comments = [dummyComment(action.data.content), ...post.Comments];\n  //         const mainPosts = [...state.mainPosts];\n  //         mainPosts[postIndex] = post;\n  //         return {\n  //             ...state,\n  //             mainPosts,\n  //             addCommentLoading: false,\n  //             addCommentDone: true,\n  //         };\n  //     }\n  //     case ADD_COMMENT_FAILURE:\n  //         console.log(\"reducer add comment failure\");\n  //         return {\n  //             ...state,\n  //             addCommentLoading: false,\n  //             addCommentError: action.error,\n  //         };\n  //     default:\n  //         return state;\n  // }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/reducers/post.js"],"names":["shortid","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","generate","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","dummyPost","data","generateDummyPost","number","Array","fill","map","name","findName","lorem","paragraph","image","sentence","concat","dummyComment","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPostAction","type","reducer","state","action","draft","unshift","error","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["import shortid from \"shortid\";\nimport produce from \"immer\"; // 불변성 유지에 참 좋은 immer\nimport faker from \"faker\";\n\n// user 기본 state 구조\nconst initialState = {\n    mainPosts: [\n        {\n            id: 1,\n            User: { id: 1, nickname: \"동현이\" },\n            content: \"동현이의 첫 번째 게시글! #아잉 #조아요\",\n            Images: [{ src: \"https://expanddesk-media.s3.amazonaws.com/hosting/740px-Google_Docs_logo.svg.png\" }, { src: \"https://expanddesk-media.s3.amazonaws.com/hosting/logo_google-drive.png\" }],\n            Comments: [\n                {\n                    id: shortid.generate(),\n                    User: { id: shortid.generate(), nickname: \"동현삼\" },\n                    content: \"꺄악\",\n                },\n                {\n                    id: shortid.generate(),\n                    User: { id: shortid.generate(), nickname: \"동현사\" },\n                    content: \"아이조아\",\n                },\n            ],\n        },\n    ],\n    // 이미지 업로드할 때의 경로\n    imagePaths: [],\n\n    // 게시글 추가가 완료되었는지 여부\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n\n    // 게시글 삭제가 완료되었는지 여부\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n\n    // 댓글 추가가 완료되었는지 여부\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n};\n\nconst dummyPost = (data) => ({\n    id: data.id,\n    content: data.content,\n    User: { id: 1, nickname: \"동현이\" },\n    Images: [],\n    Comments: [],\n});\n\nexport const generateDummyPost = (number) =>\n    Array(number)\n        .fill()\n        .map(() => ({\n            id: shortid.generate(),\n            User: {\n                id: shortid.generate(),\n                nickname: faker.name.findName(),\n            },\n            content: faker.lorem.paragraph(),\n            Images: [\n                {\n                    src: faker.image.image(),\n                },\n            ],\n            Comments: [\n                {\n                    User: {\n                        id: shortid.generate(),\n                        nickname: faker.name.findName(),\n                    },\n                    content: faker.lorem.sentence(),\n                },\n            ],\n        }));\n\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(30));\n\nconst dummyComment = (data) => ({\n    id: shortid.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: \"동현이\",\n    },\n});\n\n// 액션 오타 방지용\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const addPostAction = (data) => {\n    return {\n        type: ADD_POST_REQUEST,\n        data,\n    };\n};\n\n// immer를 이용하면 불변성이고 나발이고 쉽게 상태를 바꿀 수 있다!\nconst reducer = (state = initialState, action) => {\n    return produce(state, (draft) => {\n        switch (action.type) {\n            // 포스트 추가 액션\n            case ADD_POST_REQUEST:\n                draft.addPostLoading = true;\n                draft.addPostDone = false;\n                draft.addPostError = null;\n                break;\n            case ADD_POST_SUCCESS:\n                draft.mainPosts.unshift(dummyPost(action.data)); // immer를 이용해 배열의 맨 앞에 바로 추가\n                draft.addPostLoading = false;\n                draft.addPostDone = true;\n                break;\n            case ADD_POST_FAILURE:\n                draft.addPostLoading = false;\n                draft.addPostError = action.error;\n                break;\n\n            // 포스트 삭제 액션\n            case REMOVE_POST_REQUEST:\n                draft.removePostLoading = true;\n                draft.removePostDone = false;\n                draft.removePostError = null;\n                break;\n            case REMOVE_POST_SUCCESS:\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data); // 지울 때는 필터를 이용\n                draft.removePostLoading = false;\n                draft.removePostDone = true;\n                break;\n            case REMOVE_POST_FAILURE:\n                draft.removePostLoading = false;\n                draft.removePostError = action.error;\n                break;\n\n            // 코멘트 액션\n            case ADD_COMMENT_REQUEST:\n                draft.addCommentLoading = true;\n                draft.addCommentDone = false;\n                draft.addCommentError = null;\n                break;\n            case ADD_COMMENT_SUCCESS: {\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId); // 해당 아이디의 게시물 찾기\n                post.Comments.unshift(dummyComment(action.data.content)); // 추가하고 끝~\n                draft.addCommentLoading = false;\n                draft.addCommentDone = true;\n                break;\n            }\n            case ADD_COMMENT_FAILURE:\n                draft.addCommentLoading = false;\n                draft.addCommentError = action.error;\n                break;\n\n            default:\n                break;\n        }\n    });\n\n    // switch (action.type) {\n    //     // 포스트 추가 액션\n    //     case ADD_POST_REQUEST:\n    //         console.log(\"reducer add post request\");\n    //         return {\n    //             ...state,\n    //             addPostLoading: true,\n    //             addPostDone: false,\n    //             addPostError: null,\n    //         };\n    //     case ADD_POST_SUCCESS:\n    //         console.log(\"reducer add post success\");\n    //         return {\n    //             ...state,\n    //             mainPosts: [dummyPost(action.data), ...state.mainPosts],\n    //             addPostLoading: false,\n    //             addPostDone: true,\n    //         };\n    //     case ADD_POST_FAILURE:\n    //         console.log(\"reducer add post failure\");\n    //         return {\n    //             ...state,\n    //             addPostLoading: false,\n    //             addPostError: action.error,\n    //         };\n\n    //     // 포스트 삭제 액션\n    //     case REMOVE_POST_REQUEST:\n    //         console.log(\"reducer remove post request\");\n    //         return {\n    //             ...state,\n    //             removePostLoading: true,\n    //             removePostDone: false,\n    //             removePostError: null,\n    //         };\n    //     case REMOVE_POST_SUCCESS:\n    //         console.log(\"reducer remove post success\");\n    //         return {\n    //             ...state,\n    //             mainPosts: state.mainPosts.filter((v) => v.id !== action.data), // 지울 때는 필터를 이용\n    //             removePostLoading: false,\n    //             removePostDone: true,\n    //         };\n    //     case REMOVE_POST_FAILURE:\n    //         console.log(\"reducer remove post failure\");\n    //         return {\n    //             ...state,\n    //             removePostLoading: false,\n    //             removePostError: action.error,\n    //         };\n\n    //     // 코멘트 액션\n    //     case ADD_COMMENT_REQUEST:\n    //         console.log(\"reducer add comment request\");\n    //         return {\n    //             ...state,\n    //             addCommentLoading: true,\n    //             addCommentDone: false,\n    //             addCommentError: null,\n    //         };\n    //     case ADD_COMMENT_SUCCESS: {\n    //         const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n    //         const post = { ...state.mainPosts[postIndex] };\n    //         post.Comments = [dummyComment(action.data.content), ...post.Comments];\n    //         const mainPosts = [...state.mainPosts];\n    //         mainPosts[postIndex] = post;\n    //         return {\n    //             ...state,\n    //             mainPosts,\n    //             addCommentLoading: false,\n    //             addCommentDone: true,\n    //         };\n    //     }\n    //     case ADD_COMMENT_FAILURE:\n    //         console.log(\"reducer add comment failure\");\n    //         return {\n    //             ...state,\n    //             addCommentLoading: false,\n    //             addCommentError: action.error,\n    //         };\n\n    //     default:\n    //         return state;\n    // }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}