{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from \"redux\"; // 여러 파일에 나눠져 있는 reducer들을 합친다.\n\nimport user from \"./user\";\nimport post from \"./post\"; // 이것이 reducer. (이전상태, 액션) => 다음상태\n\nvar rootReducer = combineReducers({\n  index: function index() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    switch (action.type) {\n      case \"HYDRATE\":\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user: user,\n  post: post\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","index","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC,C,CAAyC;;AACzC,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;;AACA,IAAMC,WAAW,GAAGH,eAAe,CAAC;AAChCI,EAAAA,KAAK,EAAE,iBAAwB;AAAA,QAAvBC,KAAuB,uEAAf,EAAe;AAAA,QAAXC,MAAW;;AAC3B,YAAQA,MAAM,CAACC,IAAf;AACI,WAAK,SAAL;AACI,+CAAYF,KAAZ,GAAsBC,MAAM,CAACE,OAA7B;;AACJ;AACI,eAAOH,KAAP;AAJR;AAMH,GAR+B;AAShCJ,EAAAA,IAAI,EAAJA,IATgC;AAUhCC,EAAAA,IAAI,EAAJA;AAVgC,CAAD,CAAnC;AAaA,eAAeC,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from \"redux\"; // 여러 파일에 나눠져 있는 reducer들을 합친다.\nimport user from \"./user\";\nimport post from \"./post\";\n\n// 이것이 reducer. (이전상태, 액션) => 다음상태\nconst rootReducer = combineReducers({\n    index: (state = {}, action) => {\n        switch (action.type) {\n            case \"HYDRATE\":\n                return { ...state, ...action.payload };\n            default:\n                return state;\n        }\n    },\n    user,\n    post\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}