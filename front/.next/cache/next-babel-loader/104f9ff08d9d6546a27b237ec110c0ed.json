{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\"; // 게시물 불러오기\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data // 불러올 게시물\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n} // 게시글 추가\n\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  }); // req.body.content\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n    console.log(\"saga add post success\");\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n} // 게시글 삭제\n\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data // 지울 게시글의 아이디가 들어있음 - PostId: parseInt(req.params.postId)\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n    console.log(\"saga remove post success\");\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n} // 댓글 추가\n\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n    console.log(\"saga add comment success\");\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: error.response.data\n    });\n  }\n} // 게시물 좋아요\n\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`); // 일부를 수정하는 것이니까 patch\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data); // action.data는 페이지에서 받아 온 post.id이다.\n\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data // 불러올 게시물\n\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n} // 게시물 좋아요 취소\n\n\nfunction unlikePostAPI(data) {\n  return axios.patch(`/delete/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data // 불러올 게시물\n\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  // 5초에 한 번만 실행\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment), fork(watchLikePost), fork(watchUnlikePost)]);\n}","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/sagas/post.js"],"names":["all","fork","call","put","takeLatest","delay","throttle","axios","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","result","type","err","error","response","addPostAPI","post","content","addPost","id","console","log","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","likePostAPI","patch","likePost","unlikePostAPI","unlikePost","watchLoadPost","watchAddPost","watchRemovePost","watchAddComment","watchLikePost","watchUnlikePost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest, delay, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nimport {\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    LOAD_POSTS_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n    REMOVE_POST_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    ADD_COMMENT_FAILURE,\n    LIKE_POST_REQUEST,\n    LIKE_POST_SUCCESS,\n    LIKE_POST_FAILURE,\n    UNLIKE_POST_REQUEST,\n    UNLIKE_POST_SUCCESS,\n    UNLIKE_POST_FAILURE,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\n// 게시물 불러오기\nfunction loadPostsAPI(data) {\n    return axios.get(\"/posts\", data);\n}\nfunction* loadPosts(action) {\n    try {\n        const result = yield call(loadPostsAPI, action.data);\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data, // 불러올 게시물\n        });\n    } catch (err) {\n        yield put({ type: LOAD_POSTS_FAILURE, error: err.response.data });\n    }\n}\n\n// 게시글 추가\nfunction addPostAPI(data) {\n    return axios.post(\"/post\", { content: data }); // req.body.content\n}\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        });\n        console.log(\"saga add post success\");\n    } catch (err) {\n        yield put({ type: ADD_POST_FAILURE, error: err.response.data });\n    }\n}\n\n// 게시글 삭제\nfunction removePostAPI(data) {\n    return axios.delete(`/post/${data}`);\n}\nfunction* removePost(action) {\n    try {\n        const result = yield call(removePostAPI, action.data);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data, // 지울 게시글의 아이디가 들어있음 - PostId: parseInt(req.params.postId)\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: result.data,\n        });\n        console.log(\"saga remove post success\");\n    } catch (err) {\n        yield put({ type: REMOVE_POST_FAILURE, error: err.response.data });\n    }\n}\n\n// 댓글 추가\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data,\n        });\n        console.log(\"saga add comment success\");\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: error.response.data,\n        });\n    }\n}\n\n// 게시물 좋아요\nfunction likePostAPI(data) {\n    return axios.patch(`/post/${data}/like`); // 일부를 수정하는 것이니까 patch\n}\nfunction* likePost(action) {\n    try {\n        const result = yield call(likePostAPI, action.data); // action.data는 페이지에서 받아 온 post.id이다.\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data, // 불러올 게시물\n        });\n    } catch (err) {\n        yield put({ type: LIKE_POST_FAILURE, error: err.response.data });\n    }\n}\n\n// 게시물 좋아요 취소\nfunction unlikePostAPI(data) {\n    return axios.patch(`/delete/${data}/like`);\n}\nfunction* unlikePost(action) {\n    try {\n        const result = yield call(unlikePostAPI, action.data);\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data, // 불러올 게시물\n        });\n    } catch (err) {\n        yield put({ type: UNLIKE_POST_FAILURE, error: err.response.data });\n    }\n}\n\nfunction* watchLoadPost() {\n    // 5초에 한 번만 실행\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nexport default function* postSaga() {\n    yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment), fork(watchLikePost), fork(watchUnlikePost)]);\n}\n"]},"metadata":{},"sourceType":"module"}