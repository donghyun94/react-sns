{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortid from \"shortid\";\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\"; // 게시물 불러오기\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/post\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data // 불러올 게시물\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n} // 게시글 추가\n\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  }); // req.body.content\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n    console.log(\"saga add post success\");\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n} // 게시글 삭제\n\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(2000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data // 지울 게시글의 아이디가 들어있음\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n    console.log(\"saga remove post success\");\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n    console.log(\"saga add comment success\");\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  // 5초에 한 번만 실행\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/dong/Documents/react-sns/front/sagas/post.js"],"names":["all","fork","call","put","takeLatest","delay","throttle","axios","shortid","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","result","type","err","error","response","addPostAPI","post","content","addPost","id","console","log","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPost","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest, delay, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortid from \"shortid\";\n\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\n// 게시물 불러오기\nfunction loadPostsAPI(data) {\n    return axios.get(\"/post\", data);\n}\nfunction* loadPosts(action) {\n    try {\n        const result = yield call(loadPostsAPI, action.data);\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data, // 불러올 게시물\n        });\n    } catch (err) {\n        yield put({ type: LOAD_POSTS_FAILURE, error: err.response.data });\n    }\n}\n\n// 게시글 추가\nfunction addPostAPI(data) {\n    return axios.post(\"/post\", { content: data }); // req.body.content\n}\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        });\n        console.log(\"saga add post success\");\n    } catch (err) {\n        yield put({ type: ADD_POST_FAILURE, error: err.response.data });\n    }\n}\n\n// 게시글 삭제\nfunction removePostAPI(data) {\n    return axios.delete(\"/post\", data);\n}\nfunction* removePost(action) {\n    try {\n        // const result = yield call(addPostAPI, action.data);\n        yield delay(2000);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data, // 지울 게시글의 아이디가 들어있음\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data,\n        });\n        console.log(\"saga remove post success\");\n    } catch (err) {\n        yield put({ type: REMOVE_POST_FAILURE, error: err.response.data });\n    }\n}\n\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data,\n        });\n        console.log(\"saga add comment success\");\n    } catch (err) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchLoadPost() {\n    // 5초에 한 번만 실행\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}\n"]},"metadata":{},"sourceType":"module"}